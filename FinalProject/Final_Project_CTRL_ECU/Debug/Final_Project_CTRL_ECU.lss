
Final_Project_CTRL_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002068  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00002068  000020fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800072  00800072  0000210e  2**0
                  ALLOC
  3 .stab         0000249c  00000000  00000000  00002110  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014d8  00000000  00000000  000045ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005a84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005d34  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000797d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008868  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009618  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009778  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009a05  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a1d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 3a 0d 	jmp	0x1a74	; 0x1a74 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 6d 0d 	jmp	0x1ada	; 0x1ada <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e6       	ldi	r30, 0x68	; 104
      68:	f0 e2       	ldi	r31, 0x20	; 32
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e7       	ldi	r26, 0x72	; 114
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 37       	cpi	r26, 0x7D	; 125
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 32 10 	jmp	0x2064	; 0x2064 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 fb 0f 	jmp	0x1ff6	; 0x1ff6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 17 10 	jmp	0x202e	; 0x202e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 07 10 	jmp	0x200e	; 0x200e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 23 10 	jmp	0x2046	; 0x2046 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 07 10 	jmp	0x200e	; 0x200e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 23 10 	jmp	0x2046	; 0x2046 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 fb 0f 	jmp	0x1ff6	; 0x1ff6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 17 10 	jmp	0x202e	; 0x202e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 07 10 	jmp	0x200e	; 0x200e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 23 10 	jmp	0x2046	; 0x2046 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 07 10 	jmp	0x200e	; 0x200e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 23 10 	jmp	0x2046	; 0x2046 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 07 10 	jmp	0x200e	; 0x200e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 23 10 	jmp	0x2046	; 0x2046 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 0b 10 	jmp	0x2016	; 0x2016 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 27 10 	jmp	0x204e	; 0x204e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
#include "avr/io.h"



int main (void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2d 97       	sbiw	r28, 0x0d	; 13
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	uint8 no_of_try =0;
     b5a:	1b 82       	std	Y+3, r1	; 0x03
	uint8 state=0;
     b5c:	1a 82       	std	Y+2, r1	; 0x02
	uint8 option=0;
     b5e:	19 82       	std	Y+1, r1	; 0x01
	uint8 recievedPassword[PASSWORD_LENGTH];
	uint8 enteredPassword[PASSWORD_LENGTH];

	SREG|=(1<<7); 			//Enable I-Bit
     b60:	af e5       	ldi	r26, 0x5F	; 95
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	ef e5       	ldi	r30, 0x5F	; 95
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	80 81       	ld	r24, Z
     b6a:	80 68       	ori	r24, 0x80	; 128
     b6c:	8c 93       	st	X, r24
	MODULES_init();			//Modules Initialization
     b6e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <MODULES_init>
	while (UART_recieveByte() != READY);
     b72:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <UART_recieveByte>
     b76:	80 31       	cpi	r24, 0x10	; 16
     b78:	e1 f7       	brne	.-8      	; 0xb72 <main+0x2c>
	UART_sendByte(READY);
     b7a:	80 e1       	ldi	r24, 0x10	; 16
     b7c:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <UART_sendByte>
	/*
	 *  Setting Password for the first time use :
	 * 1- Receiving password from HMI MCU
	 * 2- Saving password in the EEPROM Module
	 */
	UART_sendByte(READY);
     b80:	80 e1       	ldi	r24, 0x10	; 16
     b82:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <UART_sendByte>
	recievePassword_from_HMIECU(recievedPassword);
     b86:	ce 01       	movw	r24, r28
     b88:	04 96       	adiw	r24, 0x04	; 4
     b8a:	0e 94 d7 06 	call	0xdae	; 0xdae <recievePassword_from_HMIECU>
	savePassword_in_EEROM(recievedPassword);
     b8e:	ce 01       	movw	r24, r28
     b90:	04 96       	adiw	r24, 0x04	; 4
     b92:	0e 94 fd 06 	call	0xdfa	; 0xdfa <savePassword_in_EEROM>
	while(1)
	{
		/* Receive Option from User through the HMI MCU */
		option=UART_recieveByte();
     b96:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <UART_recieveByte>
     b9a:	89 83       	std	Y+1, r24	; 0x01

		/* If the user entered '+' Open Door option*/
		if(option==Open_Door_Option)
     b9c:	89 81       	ldd	r24, Y+1	; 0x01
     b9e:	8b 32       	cpi	r24, 0x2B	; 43
     ba0:	c1 f5       	brne	.+112    	; 0xc12 <main+0xcc>
			/*
			 * Receive entered password by user from HMI MCU
			 * then retrieve application password from the EEPROM
			 * then compare between the entered password by user and the application password
			 */
			recievePassword_from_HMIECU(enteredPassword);
     ba2:	ce 01       	movw	r24, r28
     ba4:	09 96       	adiw	r24, 0x09	; 9
     ba6:	0e 94 d7 06 	call	0xdae	; 0xdae <recievePassword_from_HMIECU>
			retrievePassword_from_EEROM();
     baa:	0e 94 a0 07 	call	0xf40	; 0xf40 <retrievePassword_from_EEROM>
			state=passwordEntering_Matching(App_Password,enteredPassword);
     bae:	88 e7       	ldi	r24, 0x78	; 120
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	9e 01       	movw	r18, r28
     bb4:	27 5f       	subi	r18, 0xF7	; 247
     bb6:	3f 4f       	sbci	r19, 0xFF	; 255
     bb8:	b9 01       	movw	r22, r18
     bba:	0e 94 3e 08 	call	0x107c	; 0x107c <passwordEntering_Matching>
     bbe:	8a 83       	std	Y+2, r24	; 0x02

			if(state==Passwords_Match)
     bc0:	8a 81       	ldd	r24, Y+2	; 0x02
     bc2:	81 30       	cpi	r24, 0x01	; 1
     bc4:	59 f4       	brne	.+22     	; 0xbdc <main+0x96>
				 * and call openingDoor_and_closingDoor() which performs:
				 * Opening door by rotating DcMotor CW for 15sec,
				 * holding it for 3sec
				 * and closing door by rotating motor A_CW for 15sec.
				 */
				while (UART_recieveByte() != READY);
     bc6:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <UART_recieveByte>
     bca:	80 31       	cpi	r24, 0x10	; 16
     bcc:	e1 f7       	brne	.-8      	; 0xbc6 <main+0x80>
				UART_sendByte(Opening_Door_Action);
     bce:	88 e5       	ldi	r24, 0x58	; 88
     bd0:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <UART_sendByte>
				no_of_try=0;
     bd4:	1b 82       	std	Y+3, r1	; 0x03
				openingDoor_and_closingDoor();
     bd6:	0e 94 75 08 	call	0x10ea	; 0x10ea <openingDoor_and_closingDoor>
     bda:	dd cf       	rjmp	.-70     	; 0xb96 <main+0x50>
			}
			else if (state==Passwords_NotMatch)
     bdc:	8a 81       	ldd	r24, Y+2	; 0x02
     bde:	88 23       	and	r24, r24
     be0:	d1 f6       	brne	.-76     	; 0xb96 <main+0x50>
			{
				/*
				 * In case of passwords don't match:
				 * check if the number of tries reaches the Maximum number of tries or not:
				 */
				no_of_try++;
     be2:	8b 81       	ldd	r24, Y+3	; 0x03
     be4:	8f 5f       	subi	r24, 0xFF	; 255
     be6:	8b 83       	std	Y+3, r24	; 0x03
				/*
				 * If it reaches:
				 * 	- Send Danger message to HMI MCU to operate the "Danger Mission"
				 * 	- Call Danger_detected function to turn on the buzzer and LED
				 */
				if(no_of_try>=MAX_TRY)
     be8:	8b 81       	ldd	r24, Y+3	; 0x03
     bea:	83 30       	cpi	r24, 0x03	; 3
     bec:	50 f0       	brcs	.+20     	; 0xc02 <main+0xbc>
				{
					while (UART_recieveByte() != READY);
     bee:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <UART_recieveByte>
     bf2:	80 31       	cpi	r24, 0x10	; 16
     bf4:	e1 f7       	brne	.-8      	; 0xbee <main+0xa8>
					UART_sendByte(Danger);
     bf6:	83 e3       	ldi	r24, 0x33	; 51
     bf8:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <UART_sendByte>
					Danger_detected();
     bfc:	0e 94 b7 08 	call	0x116e	; 0x116e <Danger_detected>
     c00:	ca cf       	rjmp	.-108    	; 0xb96 <main+0x50>
				 * If not:
				 * 	- Send Password_NotMatch message to HMI MCU to operate the "Mismatch Password mission"
				 */
				else
				{
					while (UART_recieveByte() != READY);
     c02:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <UART_recieveByte>
     c06:	80 31       	cpi	r24, 0x10	; 16
     c08:	e1 f7       	brne	.-8      	; 0xc02 <main+0xbc>
					UART_sendByte(Passwords_NotMatch);
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <UART_sendByte>
     c10:	c2 cf       	rjmp	.-124    	; 0xb96 <main+0x50>
				}

			}
		}
		/* If the user entered '-' Change Password Option */
		else if (option==Change_Password_Option)
     c12:	89 81       	ldd	r24, Y+1	; 0x01
     c14:	8d 32       	cpi	r24, 0x2D	; 45
     c16:	09 f0       	breq	.+2      	; 0xc1a <main+0xd4>
     c18:	be cf       	rjmp	.-132    	; 0xb96 <main+0x50>
		/*
		 * Receive entered password by user from HMI MCU
		 * then retrieve application password from the EEPROM
		 * then compare between the entered password by user and the application password
		 */
			recievePassword_from_HMIECU(enteredPassword);
     c1a:	ce 01       	movw	r24, r28
     c1c:	09 96       	adiw	r24, 0x09	; 9
     c1e:	0e 94 d7 06 	call	0xdae	; 0xdae <recievePassword_from_HMIECU>
			retrievePassword_from_EEROM();
     c22:	0e 94 a0 07 	call	0xf40	; 0xf40 <retrievePassword_from_EEROM>
			state = passwordEntering_Matching(App_Password, enteredPassword);
     c26:	88 e7       	ldi	r24, 0x78	; 120
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	9e 01       	movw	r18, r28
     c2c:	27 5f       	subi	r18, 0xF7	; 247
     c2e:	3f 4f       	sbci	r19, 0xFF	; 255
     c30:	b9 01       	movw	r22, r18
     c32:	0e 94 3e 08 	call	0x107c	; 0x107c <passwordEntering_Matching>
     c36:	8a 83       	std	Y+2, r24	; 0x02

			if (state == Passwords_Match)
     c38:	8a 81       	ldd	r24, Y+2	; 0x02
     c3a:	81 30       	cpi	r24, 0x01	; 1
     c3c:	a1 f4       	brne	.+40     	; 0xc66 <main+0x120>
			 * In case of passwords match:
			 * send to HMI MCU change password action message to perform setPassword mission on LCD
			 * and call recievePassword_from_HMIECU() which receives entered password by user from HMI MCU
			 * and call savePassword_in_EEROM() which saves password in the EEPROM Module
			 */
				while (UART_recieveByte() != READY);
     c3e:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <UART_recieveByte>
     c42:	80 31       	cpi	r24, 0x10	; 16
     c44:	e1 f7       	brne	.-8      	; 0xc3e <main+0xf8>
				UART_sendByte(Changing_Password_Action);
     c46:	8c e2       	ldi	r24, 0x2C	; 44
     c48:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <UART_sendByte>
				no_of_try = 0;
     c4c:	1b 82       	std	Y+3, r1	; 0x03
				UART_sendByte(READY);
     c4e:	80 e1       	ldi	r24, 0x10	; 16
     c50:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <UART_sendByte>
				recievePassword_from_HMIECU(recievedPassword);
     c54:	ce 01       	movw	r24, r28
     c56:	04 96       	adiw	r24, 0x04	; 4
     c58:	0e 94 d7 06 	call	0xdae	; 0xdae <recievePassword_from_HMIECU>
				savePassword_in_EEROM(recievedPassword);
     c5c:	ce 01       	movw	r24, r28
     c5e:	04 96       	adiw	r24, 0x04	; 4
     c60:	0e 94 fd 06 	call	0xdfa	; 0xdfa <savePassword_in_EEROM>
     c64:	98 cf       	rjmp	.-208    	; 0xb96 <main+0x50>
			}
			else if (state == Passwords_NotMatch)
     c66:	8a 81       	ldd	r24, Y+2	; 0x02
     c68:	88 23       	and	r24, r24
     c6a:	09 f0       	breq	.+2      	; 0xc6e <main+0x128>
     c6c:	94 cf       	rjmp	.-216    	; 0xb96 <main+0x50>
			{
			/*
			 * In case of passwords don't match:
			 * check if the number of tries reaches the Maximum number of tries or not:
			 */
				no_of_try++;
     c6e:	8b 81       	ldd	r24, Y+3	; 0x03
     c70:	8f 5f       	subi	r24, 0xFF	; 255
     c72:	8b 83       	std	Y+3, r24	; 0x03
				if (no_of_try >= MAX_TRY)
     c74:	8b 81       	ldd	r24, Y+3	; 0x03
     c76:	83 30       	cpi	r24, 0x03	; 3
     c78:	50 f0       	brcs	.+20     	; 0xc8e <main+0x148>
				/*
				 * If it reaches:
				 * 	- Send Danger message to HMI MCU to operate the "Danger Mission"
				 * 	- Call Danger_detected function to turn on the buzzer and LED
				 */
					while (UART_recieveByte() != READY);
     c7a:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <UART_recieveByte>
     c7e:	80 31       	cpi	r24, 0x10	; 16
     c80:	e1 f7       	brne	.-8      	; 0xc7a <main+0x134>
					UART_sendByte(Danger);
     c82:	83 e3       	ldi	r24, 0x33	; 51
     c84:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <UART_sendByte>
					Danger_detected();
     c88:	0e 94 b7 08 	call	0x116e	; 0x116e <Danger_detected>
     c8c:	84 cf       	rjmp	.-248    	; 0xb96 <main+0x50>
				{
				/*
				 * If not:
				 * 	- Send Password_NotMatch message to HMI MCU to operate the "Mismatch Password mission"
				 */
					while (UART_recieveByte() != READY);
     c8e:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <UART_recieveByte>
     c92:	80 31       	cpi	r24, 0x10	; 16
     c94:	e1 f7       	brne	.-8      	; 0xc8e <main+0x148>
					UART_sendByte(Passwords_NotMatch);
     c96:	80 e0       	ldi	r24, 0x00	; 0
     c98:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <UART_sendByte>
     c9c:	7c cf       	rjmp	.-264    	; 0xb96 <main+0x50>

00000c9e <MODULES_init>:
uint32 g_ticks = 0;
uint8 App_Password[PASSWORD_LENGTH]; /*global variable to store Password*/


void MODULES_init (void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
     ca6:	68 97       	sbiw	r28, 0x18	; 24
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	cd bf       	out	0x3d, r28	; 61

	/* Uart Configuration & Initialization*/
	Uart_ConfigType Uart_Config = {9600,EIGHT_DATABITS,PARITY_DISABLED,ONE_STOPBIT};
     cb2:	ce 01       	movw	r24, r28
     cb4:	01 96       	adiw	r24, 0x01	; 1
     cb6:	98 8b       	std	Y+16, r25	; 0x10
     cb8:	8f 87       	std	Y+15, r24	; 0x0f
     cba:	eb e6       	ldi	r30, 0x6B	; 107
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	fa 8b       	std	Y+18, r31	; 0x12
     cc0:	e9 8b       	std	Y+17, r30	; 0x11
     cc2:	f7 e0       	ldi	r31, 0x07	; 7
     cc4:	fb 8b       	std	Y+19, r31	; 0x13
     cc6:	e9 89       	ldd	r30, Y+17	; 0x11
     cc8:	fa 89       	ldd	r31, Y+18	; 0x12
     cca:	00 80       	ld	r0, Z
     ccc:	89 89       	ldd	r24, Y+17	; 0x11
     cce:	9a 89       	ldd	r25, Y+18	; 0x12
     cd0:	01 96       	adiw	r24, 0x01	; 1
     cd2:	9a 8b       	std	Y+18, r25	; 0x12
     cd4:	89 8b       	std	Y+17, r24	; 0x11
     cd6:	ef 85       	ldd	r30, Y+15	; 0x0f
     cd8:	f8 89       	ldd	r31, Y+16	; 0x10
     cda:	00 82       	st	Z, r0
     cdc:	8f 85       	ldd	r24, Y+15	; 0x0f
     cde:	98 89       	ldd	r25, Y+16	; 0x10
     ce0:	01 96       	adiw	r24, 0x01	; 1
     ce2:	98 8b       	std	Y+16, r25	; 0x10
     ce4:	8f 87       	std	Y+15, r24	; 0x0f
     ce6:	9b 89       	ldd	r25, Y+19	; 0x13
     ce8:	91 50       	subi	r25, 0x01	; 1
     cea:	9b 8b       	std	Y+19, r25	; 0x13
     cec:	eb 89       	ldd	r30, Y+19	; 0x13
     cee:	ee 23       	and	r30, r30
     cf0:	51 f7       	brne	.-44     	; 0xcc6 <MODULES_init+0x28>
	UART_init(&Uart_Config);
     cf2:	ce 01       	movw	r24, r28
     cf4:	01 96       	adiw	r24, 0x01	; 1
     cf6:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <UART_init>


	/*
	 *  Timer0 Configuration & Initialization
	 */
	Timer0_ConfigType Timer0_Config = { COMPARE_MODE, F_CPU_1024, 0, 245 }; //for counting 0.25 second
     cfa:	82 e0       	ldi	r24, 0x02	; 2
     cfc:	88 87       	std	Y+8, r24	; 0x08
     cfe:	85 e0       	ldi	r24, 0x05	; 5
     d00:	89 87       	std	Y+9, r24	; 0x09
     d02:	1a 86       	std	Y+10, r1	; 0x0a
     d04:	85 ef       	ldi	r24, 0xF5	; 245
     d06:	8b 87       	std	Y+11, r24	; 0x0b
	Timer0_init(&Timer0_Config);
     d08:	ce 01       	movw	r24, r28
     d0a:	08 96       	adiw	r24, 0x08	; 8
     d0c:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <Timer0_init>
	Timer0_SetCallBack(Timer0_Tick_Increment);
     d10:	8d eb       	ldi	r24, 0xBD	; 189
     d12:	96 e0       	ldi	r25, 0x06	; 6
     d14:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <Timer0_SetCallBack>

	TWI_ConfigType TWI_Config={ 0x02, TWI_Prescaler_1, 0x01};
     d18:	ce 01       	movw	r24, r28
     d1a:	0c 96       	adiw	r24, 0x0c	; 12
     d1c:	9d 8b       	std	Y+21, r25	; 0x15
     d1e:	8c 8b       	std	Y+20, r24	; 0x14
     d20:	e8 e6       	ldi	r30, 0x68	; 104
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	ff 8b       	std	Y+23, r31	; 0x17
     d26:	ee 8b       	std	Y+22, r30	; 0x16
     d28:	f3 e0       	ldi	r31, 0x03	; 3
     d2a:	f8 8f       	std	Y+24, r31	; 0x18
     d2c:	ee 89       	ldd	r30, Y+22	; 0x16
     d2e:	ff 89       	ldd	r31, Y+23	; 0x17
     d30:	00 80       	ld	r0, Z
     d32:	8e 89       	ldd	r24, Y+22	; 0x16
     d34:	9f 89       	ldd	r25, Y+23	; 0x17
     d36:	01 96       	adiw	r24, 0x01	; 1
     d38:	9f 8b       	std	Y+23, r25	; 0x17
     d3a:	8e 8b       	std	Y+22, r24	; 0x16
     d3c:	ec 89       	ldd	r30, Y+20	; 0x14
     d3e:	fd 89       	ldd	r31, Y+21	; 0x15
     d40:	00 82       	st	Z, r0
     d42:	8c 89       	ldd	r24, Y+20	; 0x14
     d44:	9d 89       	ldd	r25, Y+21	; 0x15
     d46:	01 96       	adiw	r24, 0x01	; 1
     d48:	9d 8b       	std	Y+21, r25	; 0x15
     d4a:	8c 8b       	std	Y+20, r24	; 0x14
     d4c:	98 8d       	ldd	r25, Y+24	; 0x18
     d4e:	91 50       	subi	r25, 0x01	; 1
     d50:	98 8f       	std	Y+24, r25	; 0x18
     d52:	e8 8d       	ldd	r30, Y+24	; 0x18
     d54:	ee 23       	and	r30, r30
     d56:	51 f7       	brne	.-44     	; 0xd2c <MODULES_init+0x8e>
	TWI_init(&TWI_Config);
     d58:	ce 01       	movw	r24, r28
     d5a:	0c 96       	adiw	r24, 0x0c	; 12
     d5c:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <TWI_init>

	/* Buzzer Initialization*/
	BUZZER_init();
     d60:	0e 94 d7 08 	call	0x11ae	; 0x11ae <BUZZER_init>

	/* DcMotor Initialization*/
	DcMotor_Init();
     d64:	0e 94 00 09 	call	0x1200	; 0x1200 <DcMotor_Init>

}
     d68:	68 96       	adiw	r28, 0x18	; 24
     d6a:	0f b6       	in	r0, 0x3f	; 63
     d6c:	f8 94       	cli
     d6e:	de bf       	out	0x3e, r29	; 62
     d70:	0f be       	out	0x3f, r0	; 63
     d72:	cd bf       	out	0x3d, r28	; 61
     d74:	cf 91       	pop	r28
     d76:	df 91       	pop	r29
     d78:	08 95       	ret

00000d7a <Timer0_Tick_Increment>:

void Timer0_Tick_Increment(void)
{
     d7a:	df 93       	push	r29
     d7c:	cf 93       	push	r28
     d7e:	cd b7       	in	r28, 0x3d	; 61
     d80:	de b7       	in	r29, 0x3e	; 62
	g_ticks++;
     d82:	80 91 72 00 	lds	r24, 0x0072
     d86:	90 91 73 00 	lds	r25, 0x0073
     d8a:	a0 91 74 00 	lds	r26, 0x0074
     d8e:	b0 91 75 00 	lds	r27, 0x0075
     d92:	01 96       	adiw	r24, 0x01	; 1
     d94:	a1 1d       	adc	r26, r1
     d96:	b1 1d       	adc	r27, r1
     d98:	80 93 72 00 	sts	0x0072, r24
     d9c:	90 93 73 00 	sts	0x0073, r25
     da0:	a0 93 74 00 	sts	0x0074, r26
     da4:	b0 93 75 00 	sts	0x0075, r27
}
     da8:	cf 91       	pop	r28
     daa:	df 91       	pop	r29
     dac:	08 95       	ret

00000dae <recievePassword_from_HMIECU>:



void recievePassword_from_HMIECU (uint8 *pass)
{
     dae:	0f 93       	push	r16
     db0:	1f 93       	push	r17
     db2:	df 93       	push	r29
     db4:	cf 93       	push	r28
     db6:	00 d0       	rcall	.+0      	; 0xdb8 <recievePassword_from_HMIECU+0xa>
     db8:	0f 92       	push	r0
     dba:	cd b7       	in	r28, 0x3d	; 61
     dbc:	de b7       	in	r29, 0x3e	; 62
     dbe:	9b 83       	std	Y+3, r25	; 0x03
     dc0:	8a 83       	std	Y+2, r24	; 0x02
	for (uint8 i=0;i<PASSWORD_LENGTH;i++)
     dc2:	19 82       	std	Y+1, r1	; 0x01
     dc4:	0f c0       	rjmp	.+30     	; 0xde4 <recievePassword_from_HMIECU+0x36>
	{
		pass[i]=UART_recieveByte();
     dc6:	89 81       	ldd	r24, Y+1	; 0x01
     dc8:	28 2f       	mov	r18, r24
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	8a 81       	ldd	r24, Y+2	; 0x02
     dce:	9b 81       	ldd	r25, Y+3	; 0x03
     dd0:	8c 01       	movw	r16, r24
     dd2:	02 0f       	add	r16, r18
     dd4:	13 1f       	adc	r17, r19
     dd6:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <UART_recieveByte>
     dda:	f8 01       	movw	r30, r16
     ddc:	80 83       	st	Z, r24



void recievePassword_from_HMIECU (uint8 *pass)
{
	for (uint8 i=0;i<PASSWORD_LENGTH;i++)
     dde:	89 81       	ldd	r24, Y+1	; 0x01
     de0:	8f 5f       	subi	r24, 0xFF	; 255
     de2:	89 83       	std	Y+1, r24	; 0x01
     de4:	89 81       	ldd	r24, Y+1	; 0x01
     de6:	85 30       	cpi	r24, 0x05	; 5
     de8:	70 f3       	brcs	.-36     	; 0xdc6 <recievePassword_from_HMIECU+0x18>
	{
		pass[i]=UART_recieveByte();
	}
}
     dea:	0f 90       	pop	r0
     dec:	0f 90       	pop	r0
     dee:	0f 90       	pop	r0
     df0:	cf 91       	pop	r28
     df2:	df 91       	pop	r29
     df4:	1f 91       	pop	r17
     df6:	0f 91       	pop	r16
     df8:	08 95       	ret

00000dfa <savePassword_in_EEROM>:

void savePassword_in_EEROM(uint8 *pass){
     dfa:	df 93       	push	r29
     dfc:	cf 93       	push	r28
     dfe:	cd b7       	in	r28, 0x3d	; 61
     e00:	de b7       	in	r29, 0x3e	; 62
     e02:	61 97       	sbiw	r28, 0x11	; 17
     e04:	0f b6       	in	r0, 0x3f	; 63
     e06:	f8 94       	cli
     e08:	de bf       	out	0x3e, r29	; 62
     e0a:	0f be       	out	0x3f, r0	; 63
     e0c:	cd bf       	out	0x3d, r28	; 61
     e0e:	99 8b       	std	Y+17, r25	; 0x11
     e10:	88 8b       	std	Y+16, r24	; 0x10
	/*
	 * looping on every number in (array parameter)password and store this number in specific
	 * 		address in memory
	 */
	for(uint8 i=0;i<PASSWORD_LENGTH;i++){
     e12:	1f 86       	std	Y+15, r1	; 0x0f
     e14:	88 c0       	rjmp	.+272    	; 0xf26 <savePassword_in_EEROM+0x12c>
		EEPROM_writeByte(PASSWORD_STORED_ADRESS+i, pass[i]);
     e16:	8f 85       	ldd	r24, Y+15	; 0x0f
     e18:	88 2f       	mov	r24, r24
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	8f 5e       	subi	r24, 0xEF	; 239
     e1e:	9c 4f       	sbci	r25, 0xFC	; 252
     e20:	ac 01       	movw	r20, r24
     e22:	8f 85       	ldd	r24, Y+15	; 0x0f
     e24:	28 2f       	mov	r18, r24
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	88 89       	ldd	r24, Y+16	; 0x10
     e2a:	99 89       	ldd	r25, Y+17	; 0x11
     e2c:	fc 01       	movw	r30, r24
     e2e:	e2 0f       	add	r30, r18
     e30:	f3 1f       	adc	r31, r19
     e32:	20 81       	ld	r18, Z
     e34:	ca 01       	movw	r24, r20
     e36:	62 2f       	mov	r22, r18
     e38:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <EEPROM_writeByte>
     e3c:	80 e0       	ldi	r24, 0x00	; 0
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	a8 e4       	ldi	r26, 0x48	; 72
     e42:	b2 e4       	ldi	r27, 0x42	; 66
     e44:	8b 87       	std	Y+11, r24	; 0x0b
     e46:	9c 87       	std	Y+12, r25	; 0x0c
     e48:	ad 87       	std	Y+13, r26	; 0x0d
     e4a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e4c:	6b 85       	ldd	r22, Y+11	; 0x0b
     e4e:	7c 85       	ldd	r23, Y+12	; 0x0c
     e50:	8d 85       	ldd	r24, Y+13	; 0x0d
     e52:	9e 85       	ldd	r25, Y+14	; 0x0e
     e54:	20 e0       	ldi	r18, 0x00	; 0
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	4a e7       	ldi	r20, 0x7A	; 122
     e5a:	53 e4       	ldi	r21, 0x43	; 67
     e5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e60:	dc 01       	movw	r26, r24
     e62:	cb 01       	movw	r24, r22
     e64:	8f 83       	std	Y+7, r24	; 0x07
     e66:	98 87       	std	Y+8, r25	; 0x08
     e68:	a9 87       	std	Y+9, r26	; 0x09
     e6a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e6c:	6f 81       	ldd	r22, Y+7	; 0x07
     e6e:	78 85       	ldd	r23, Y+8	; 0x08
     e70:	89 85       	ldd	r24, Y+9	; 0x09
     e72:	9a 85       	ldd	r25, Y+10	; 0x0a
     e74:	20 e0       	ldi	r18, 0x00	; 0
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	40 e8       	ldi	r20, 0x80	; 128
     e7a:	5f e3       	ldi	r21, 0x3F	; 63
     e7c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e80:	88 23       	and	r24, r24
     e82:	2c f4       	brge	.+10     	; 0xe8e <savePassword_in_EEROM+0x94>
		__ticks = 1;
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	9e 83       	std	Y+6, r25	; 0x06
     e8a:	8d 83       	std	Y+5, r24	; 0x05
     e8c:	3f c0       	rjmp	.+126    	; 0xf0c <savePassword_in_EEROM+0x112>
	else if (__tmp > 65535)
     e8e:	6f 81       	ldd	r22, Y+7	; 0x07
     e90:	78 85       	ldd	r23, Y+8	; 0x08
     e92:	89 85       	ldd	r24, Y+9	; 0x09
     e94:	9a 85       	ldd	r25, Y+10	; 0x0a
     e96:	20 e0       	ldi	r18, 0x00	; 0
     e98:	3f ef       	ldi	r19, 0xFF	; 255
     e9a:	4f e7       	ldi	r20, 0x7F	; 127
     e9c:	57 e4       	ldi	r21, 0x47	; 71
     e9e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ea2:	18 16       	cp	r1, r24
     ea4:	4c f5       	brge	.+82     	; 0xef8 <savePassword_in_EEROM+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ea6:	6b 85       	ldd	r22, Y+11	; 0x0b
     ea8:	7c 85       	ldd	r23, Y+12	; 0x0c
     eaa:	8d 85       	ldd	r24, Y+13	; 0x0d
     eac:	9e 85       	ldd	r25, Y+14	; 0x0e
     eae:	20 e0       	ldi	r18, 0x00	; 0
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	40 e2       	ldi	r20, 0x20	; 32
     eb4:	51 e4       	ldi	r21, 0x41	; 65
     eb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eba:	dc 01       	movw	r26, r24
     ebc:	cb 01       	movw	r24, r22
     ebe:	bc 01       	movw	r22, r24
     ec0:	cd 01       	movw	r24, r26
     ec2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ec6:	dc 01       	movw	r26, r24
     ec8:	cb 01       	movw	r24, r22
     eca:	9e 83       	std	Y+6, r25	; 0x06
     ecc:	8d 83       	std	Y+5, r24	; 0x05
     ece:	0f c0       	rjmp	.+30     	; 0xeee <savePassword_in_EEROM+0xf4>
     ed0:	89 e1       	ldi	r24, 0x19	; 25
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	9c 83       	std	Y+4, r25	; 0x04
     ed6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ed8:	8b 81       	ldd	r24, Y+3	; 0x03
     eda:	9c 81       	ldd	r25, Y+4	; 0x04
     edc:	01 97       	sbiw	r24, 0x01	; 1
     ede:	f1 f7       	brne	.-4      	; 0xedc <savePassword_in_EEROM+0xe2>
     ee0:	9c 83       	std	Y+4, r25	; 0x04
     ee2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ee4:	8d 81       	ldd	r24, Y+5	; 0x05
     ee6:	9e 81       	ldd	r25, Y+6	; 0x06
     ee8:	01 97       	sbiw	r24, 0x01	; 1
     eea:	9e 83       	std	Y+6, r25	; 0x06
     eec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eee:	8d 81       	ldd	r24, Y+5	; 0x05
     ef0:	9e 81       	ldd	r25, Y+6	; 0x06
     ef2:	00 97       	sbiw	r24, 0x00	; 0
     ef4:	69 f7       	brne	.-38     	; 0xed0 <savePassword_in_EEROM+0xd6>
     ef6:	14 c0       	rjmp	.+40     	; 0xf20 <savePassword_in_EEROM+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ef8:	6f 81       	ldd	r22, Y+7	; 0x07
     efa:	78 85       	ldd	r23, Y+8	; 0x08
     efc:	89 85       	ldd	r24, Y+9	; 0x09
     efe:	9a 85       	ldd	r25, Y+10	; 0x0a
     f00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f04:	dc 01       	movw	r26, r24
     f06:	cb 01       	movw	r24, r22
     f08:	9e 83       	std	Y+6, r25	; 0x06
     f0a:	8d 83       	std	Y+5, r24	; 0x05
     f0c:	8d 81       	ldd	r24, Y+5	; 0x05
     f0e:	9e 81       	ldd	r25, Y+6	; 0x06
     f10:	9a 83       	std	Y+2, r25	; 0x02
     f12:	89 83       	std	Y+1, r24	; 0x01
     f14:	89 81       	ldd	r24, Y+1	; 0x01
     f16:	9a 81       	ldd	r25, Y+2	; 0x02
     f18:	01 97       	sbiw	r24, 0x01	; 1
     f1a:	f1 f7       	brne	.-4      	; 0xf18 <savePassword_in_EEROM+0x11e>
     f1c:	9a 83       	std	Y+2, r25	; 0x02
     f1e:	89 83       	std	Y+1, r24	; 0x01
void savePassword_in_EEROM(uint8 *pass){
	/*
	 * looping on every number in (array parameter)password and store this number in specific
	 * 		address in memory
	 */
	for(uint8 i=0;i<PASSWORD_LENGTH;i++){
     f20:	8f 85       	ldd	r24, Y+15	; 0x0f
     f22:	8f 5f       	subi	r24, 0xFF	; 255
     f24:	8f 87       	std	Y+15, r24	; 0x0f
     f26:	8f 85       	ldd	r24, Y+15	; 0x0f
     f28:	85 30       	cpi	r24, 0x05	; 5
     f2a:	08 f4       	brcc	.+2      	; 0xf2e <savePassword_in_EEROM+0x134>
     f2c:	74 cf       	rjmp	.-280    	; 0xe16 <savePassword_in_EEROM+0x1c>
		EEPROM_writeByte(PASSWORD_STORED_ADRESS+i, pass[i]);
		_delay_ms(50);
	}

}
     f2e:	61 96       	adiw	r28, 0x11	; 17
     f30:	0f b6       	in	r0, 0x3f	; 63
     f32:	f8 94       	cli
     f34:	de bf       	out	0x3e, r29	; 62
     f36:	0f be       	out	0x3f, r0	; 63
     f38:	cd bf       	out	0x3d, r28	; 61
     f3a:	cf 91       	pop	r28
     f3c:	df 91       	pop	r29
     f3e:	08 95       	ret

00000f40 <retrievePassword_from_EEROM>:

void retrievePassword_from_EEROM(void){
     f40:	df 93       	push	r29
     f42:	cf 93       	push	r28
     f44:	cd b7       	in	r28, 0x3d	; 61
     f46:	de b7       	in	r29, 0x3e	; 62
     f48:	2f 97       	sbiw	r28, 0x0f	; 15
     f4a:	0f b6       	in	r0, 0x3f	; 63
     f4c:	f8 94       	cli
     f4e:	de bf       	out	0x3e, r29	; 62
     f50:	0f be       	out	0x3f, r0	; 63
     f52:	cd bf       	out	0x3d, r28	; 61
	/*
	 * looping on every number in (array parameter)password and store this number in specific
	 * 		address in memory
	 */
	for(uint8 i=0;i<PASSWORD_LENGTH;i++){
     f54:	1f 86       	std	Y+15, r1	; 0x0f
     f56:	85 c0       	rjmp	.+266    	; 0x1062 <retrievePassword_from_EEROM+0x122>
		EEPROM_readByte(PASSWORD_STORED_ADRESS+i, App_Password+i);
     f58:	8f 85       	ldd	r24, Y+15	; 0x0f
     f5a:	88 2f       	mov	r24, r24
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	8f 5e       	subi	r24, 0xEF	; 239
     f60:	9c 4f       	sbci	r25, 0xFC	; 252
     f62:	ac 01       	movw	r20, r24
     f64:	8f 85       	ldd	r24, Y+15	; 0x0f
     f66:	88 2f       	mov	r24, r24
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	9c 01       	movw	r18, r24
     f6c:	28 58       	subi	r18, 0x88	; 136
     f6e:	3f 4f       	sbci	r19, 0xFF	; 255
     f70:	ca 01       	movw	r24, r20
     f72:	b9 01       	movw	r22, r18
     f74:	0e 94 9c 09 	call	0x1338	; 0x1338 <EEPROM_readByte>
     f78:	80 e0       	ldi	r24, 0x00	; 0
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	a8 e4       	ldi	r26, 0x48	; 72
     f7e:	b2 e4       	ldi	r27, 0x42	; 66
     f80:	8b 87       	std	Y+11, r24	; 0x0b
     f82:	9c 87       	std	Y+12, r25	; 0x0c
     f84:	ad 87       	std	Y+13, r26	; 0x0d
     f86:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f88:	6b 85       	ldd	r22, Y+11	; 0x0b
     f8a:	7c 85       	ldd	r23, Y+12	; 0x0c
     f8c:	8d 85       	ldd	r24, Y+13	; 0x0d
     f8e:	9e 85       	ldd	r25, Y+14	; 0x0e
     f90:	20 e0       	ldi	r18, 0x00	; 0
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	4a e7       	ldi	r20, 0x7A	; 122
     f96:	53 e4       	ldi	r21, 0x43	; 67
     f98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f9c:	dc 01       	movw	r26, r24
     f9e:	cb 01       	movw	r24, r22
     fa0:	8f 83       	std	Y+7, r24	; 0x07
     fa2:	98 87       	std	Y+8, r25	; 0x08
     fa4:	a9 87       	std	Y+9, r26	; 0x09
     fa6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fa8:	6f 81       	ldd	r22, Y+7	; 0x07
     faa:	78 85       	ldd	r23, Y+8	; 0x08
     fac:	89 85       	ldd	r24, Y+9	; 0x09
     fae:	9a 85       	ldd	r25, Y+10	; 0x0a
     fb0:	20 e0       	ldi	r18, 0x00	; 0
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	40 e8       	ldi	r20, 0x80	; 128
     fb6:	5f e3       	ldi	r21, 0x3F	; 63
     fb8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fbc:	88 23       	and	r24, r24
     fbe:	2c f4       	brge	.+10     	; 0xfca <retrievePassword_from_EEROM+0x8a>
		__ticks = 1;
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	9e 83       	std	Y+6, r25	; 0x06
     fc6:	8d 83       	std	Y+5, r24	; 0x05
     fc8:	3f c0       	rjmp	.+126    	; 0x1048 <retrievePassword_from_EEROM+0x108>
	else if (__tmp > 65535)
     fca:	6f 81       	ldd	r22, Y+7	; 0x07
     fcc:	78 85       	ldd	r23, Y+8	; 0x08
     fce:	89 85       	ldd	r24, Y+9	; 0x09
     fd0:	9a 85       	ldd	r25, Y+10	; 0x0a
     fd2:	20 e0       	ldi	r18, 0x00	; 0
     fd4:	3f ef       	ldi	r19, 0xFF	; 255
     fd6:	4f e7       	ldi	r20, 0x7F	; 127
     fd8:	57 e4       	ldi	r21, 0x47	; 71
     fda:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fde:	18 16       	cp	r1, r24
     fe0:	4c f5       	brge	.+82     	; 0x1034 <retrievePassword_from_EEROM+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fe2:	6b 85       	ldd	r22, Y+11	; 0x0b
     fe4:	7c 85       	ldd	r23, Y+12	; 0x0c
     fe6:	8d 85       	ldd	r24, Y+13	; 0x0d
     fe8:	9e 85       	ldd	r25, Y+14	; 0x0e
     fea:	20 e0       	ldi	r18, 0x00	; 0
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	40 e2       	ldi	r20, 0x20	; 32
     ff0:	51 e4       	ldi	r21, 0x41	; 65
     ff2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ff6:	dc 01       	movw	r26, r24
     ff8:	cb 01       	movw	r24, r22
     ffa:	bc 01       	movw	r22, r24
     ffc:	cd 01       	movw	r24, r26
     ffe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1002:	dc 01       	movw	r26, r24
    1004:	cb 01       	movw	r24, r22
    1006:	9e 83       	std	Y+6, r25	; 0x06
    1008:	8d 83       	std	Y+5, r24	; 0x05
    100a:	0f c0       	rjmp	.+30     	; 0x102a <retrievePassword_from_EEROM+0xea>
    100c:	89 e1       	ldi	r24, 0x19	; 25
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	9c 83       	std	Y+4, r25	; 0x04
    1012:	8b 83       	std	Y+3, r24	; 0x03
    1014:	8b 81       	ldd	r24, Y+3	; 0x03
    1016:	9c 81       	ldd	r25, Y+4	; 0x04
    1018:	01 97       	sbiw	r24, 0x01	; 1
    101a:	f1 f7       	brne	.-4      	; 0x1018 <retrievePassword_from_EEROM+0xd8>
    101c:	9c 83       	std	Y+4, r25	; 0x04
    101e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1020:	8d 81       	ldd	r24, Y+5	; 0x05
    1022:	9e 81       	ldd	r25, Y+6	; 0x06
    1024:	01 97       	sbiw	r24, 0x01	; 1
    1026:	9e 83       	std	Y+6, r25	; 0x06
    1028:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    102a:	8d 81       	ldd	r24, Y+5	; 0x05
    102c:	9e 81       	ldd	r25, Y+6	; 0x06
    102e:	00 97       	sbiw	r24, 0x00	; 0
    1030:	69 f7       	brne	.-38     	; 0x100c <retrievePassword_from_EEROM+0xcc>
    1032:	14 c0       	rjmp	.+40     	; 0x105c <retrievePassword_from_EEROM+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1034:	6f 81       	ldd	r22, Y+7	; 0x07
    1036:	78 85       	ldd	r23, Y+8	; 0x08
    1038:	89 85       	ldd	r24, Y+9	; 0x09
    103a:	9a 85       	ldd	r25, Y+10	; 0x0a
    103c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1040:	dc 01       	movw	r26, r24
    1042:	cb 01       	movw	r24, r22
    1044:	9e 83       	std	Y+6, r25	; 0x06
    1046:	8d 83       	std	Y+5, r24	; 0x05
    1048:	8d 81       	ldd	r24, Y+5	; 0x05
    104a:	9e 81       	ldd	r25, Y+6	; 0x06
    104c:	9a 83       	std	Y+2, r25	; 0x02
    104e:	89 83       	std	Y+1, r24	; 0x01
    1050:	89 81       	ldd	r24, Y+1	; 0x01
    1052:	9a 81       	ldd	r25, Y+2	; 0x02
    1054:	01 97       	sbiw	r24, 0x01	; 1
    1056:	f1 f7       	brne	.-4      	; 0x1054 <retrievePassword_from_EEROM+0x114>
    1058:	9a 83       	std	Y+2, r25	; 0x02
    105a:	89 83       	std	Y+1, r24	; 0x01
void retrievePassword_from_EEROM(void){
	/*
	 * looping on every number in (array parameter)password and store this number in specific
	 * 		address in memory
	 */
	for(uint8 i=0;i<PASSWORD_LENGTH;i++){
    105c:	8f 85       	ldd	r24, Y+15	; 0x0f
    105e:	8f 5f       	subi	r24, 0xFF	; 255
    1060:	8f 87       	std	Y+15, r24	; 0x0f
    1062:	8f 85       	ldd	r24, Y+15	; 0x0f
    1064:	85 30       	cpi	r24, 0x05	; 5
    1066:	08 f4       	brcc	.+2      	; 0x106a <retrievePassword_from_EEROM+0x12a>
    1068:	77 cf       	rjmp	.-274    	; 0xf58 <retrievePassword_from_EEROM+0x18>
		EEPROM_readByte(PASSWORD_STORED_ADRESS+i, App_Password+i);
		_delay_ms(50);
	}

}
    106a:	2f 96       	adiw	r28, 0x0f	; 15
    106c:	0f b6       	in	r0, 0x3f	; 63
    106e:	f8 94       	cli
    1070:	de bf       	out	0x3e, r29	; 62
    1072:	0f be       	out	0x3f, r0	; 63
    1074:	cd bf       	out	0x3d, r28	; 61
    1076:	cf 91       	pop	r28
    1078:	df 91       	pop	r29
    107a:	08 95       	ret

0000107c <passwordEntering_Matching>:


uint8 passwordEntering_Matching(uint8 *pass1,uint8 *pass2)
{
    107c:	df 93       	push	r29
    107e:	cf 93       	push	r28
    1080:	00 d0       	rcall	.+0      	; 0x1082 <passwordEntering_Matching+0x6>
    1082:	00 d0       	rcall	.+0      	; 0x1084 <passwordEntering_Matching+0x8>
    1084:	00 d0       	rcall	.+0      	; 0x1086 <passwordEntering_Matching+0xa>
    1086:	cd b7       	in	r28, 0x3d	; 61
    1088:	de b7       	in	r29, 0x3e	; 62
    108a:	9c 83       	std	Y+4, r25	; 0x04
    108c:	8b 83       	std	Y+3, r24	; 0x03
    108e:	7e 83       	std	Y+6, r23	; 0x06
    1090:	6d 83       	std	Y+5, r22	; 0x05
	uint8 matchFlag=Passwords_NotMatch;
    1092:	1a 82       	std	Y+2, r1	; 0x02
	for(uint8 i =0; i<PASSWORD_LENGTH; i++)
    1094:	19 82       	std	Y+1, r1	; 0x01
    1096:	1c c0       	rjmp	.+56     	; 0x10d0 <passwordEntering_Matching+0x54>
	{
		if (pass1[i]==pass2[i])
    1098:	89 81       	ldd	r24, Y+1	; 0x01
    109a:	28 2f       	mov	r18, r24
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	8b 81       	ldd	r24, Y+3	; 0x03
    10a0:	9c 81       	ldd	r25, Y+4	; 0x04
    10a2:	fc 01       	movw	r30, r24
    10a4:	e2 0f       	add	r30, r18
    10a6:	f3 1f       	adc	r31, r19
    10a8:	40 81       	ld	r20, Z
    10aa:	89 81       	ldd	r24, Y+1	; 0x01
    10ac:	28 2f       	mov	r18, r24
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	8d 81       	ldd	r24, Y+5	; 0x05
    10b2:	9e 81       	ldd	r25, Y+6	; 0x06
    10b4:	fc 01       	movw	r30, r24
    10b6:	e2 0f       	add	r30, r18
    10b8:	f3 1f       	adc	r31, r19
    10ba:	80 81       	ld	r24, Z
    10bc:	48 17       	cp	r20, r24
    10be:	31 f4       	brne	.+12     	; 0x10cc <passwordEntering_Matching+0x50>
		{
			matchFlag=Passwords_Match;
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	8a 83       	std	Y+2, r24	; 0x02


uint8 passwordEntering_Matching(uint8 *pass1,uint8 *pass2)
{
	uint8 matchFlag=Passwords_NotMatch;
	for(uint8 i =0; i<PASSWORD_LENGTH; i++)
    10c4:	89 81       	ldd	r24, Y+1	; 0x01
    10c6:	8f 5f       	subi	r24, 0xFF	; 255
    10c8:	89 83       	std	Y+1, r24	; 0x01
    10ca:	02 c0       	rjmp	.+4      	; 0x10d0 <passwordEntering_Matching+0x54>
		{
			matchFlag=Passwords_Match;
		}
		else
		{
			matchFlag=Passwords_NotMatch;
    10cc:	1a 82       	std	Y+2, r1	; 0x02
    10ce:	03 c0       	rjmp	.+6      	; 0x10d6 <passwordEntering_Matching+0x5a>


uint8 passwordEntering_Matching(uint8 *pass1,uint8 *pass2)
{
	uint8 matchFlag=Passwords_NotMatch;
	for(uint8 i =0; i<PASSWORD_LENGTH; i++)
    10d0:	89 81       	ldd	r24, Y+1	; 0x01
    10d2:	85 30       	cpi	r24, 0x05	; 5
    10d4:	08 f3       	brcs	.-62     	; 0x1098 <passwordEntering_Matching+0x1c>
		{
			matchFlag=Passwords_NotMatch;
			break;
		}
	}
	return matchFlag;
    10d6:	8a 81       	ldd	r24, Y+2	; 0x02
}
    10d8:	26 96       	adiw	r28, 0x06	; 6
    10da:	0f b6       	in	r0, 0x3f	; 63
    10dc:	f8 94       	cli
    10de:	de bf       	out	0x3e, r29	; 62
    10e0:	0f be       	out	0x3f, r0	; 63
    10e2:	cd bf       	out	0x3d, r28	; 61
    10e4:	cf 91       	pop	r28
    10e6:	df 91       	pop	r29
    10e8:	08 95       	ret

000010ea <openingDoor_and_closingDoor>:

void openingDoor_and_closingDoor(void)
{
    10ea:	df 93       	push	r29
    10ec:	cf 93       	push	r28
    10ee:	cd b7       	in	r28, 0x3d	; 61
    10f0:	de b7       	in	r29, 0x3e	; 62
	g_ticks = 0;
    10f2:	10 92 72 00 	sts	0x0072, r1
    10f6:	10 92 73 00 	sts	0x0073, r1
    10fa:	10 92 74 00 	sts	0x0074, r1
    10fe:	10 92 75 00 	sts	0x0075, r1
	DcMotor_Rotate(CW);
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	0e 94 1b 09 	call	0x1236	; 0x1236 <DcMotor_Rotate>
	/*
	 * wait until door next state
	 */
	while (g_ticks < DOOR_OPENNING_TIME);
    1108:	80 91 72 00 	lds	r24, 0x0072
    110c:	90 91 73 00 	lds	r25, 0x0073
    1110:	a0 91 74 00 	lds	r26, 0x0074
    1114:	b0 91 75 00 	lds	r27, 0x0075
    1118:	8c 33       	cpi	r24, 0x3C	; 60
    111a:	91 05       	cpc	r25, r1
    111c:	a1 05       	cpc	r26, r1
    111e:	b1 05       	cpc	r27, r1
    1120:	98 f3       	brcs	.-26     	; 0x1108 <openingDoor_and_closingDoor+0x1e>

	DcMotor_Rotate(STOP);
    1122:	80 e0       	ldi	r24, 0x00	; 0
    1124:	0e 94 1b 09 	call	0x1236	; 0x1236 <DcMotor_Rotate>

	while (g_ticks < DOOR_OPENNING_TIME + DOOR_LEFT_OPEN_TIME);
    1128:	80 91 72 00 	lds	r24, 0x0072
    112c:	90 91 73 00 	lds	r25, 0x0073
    1130:	a0 91 74 00 	lds	r26, 0x0074
    1134:	b0 91 75 00 	lds	r27, 0x0075
    1138:	88 34       	cpi	r24, 0x48	; 72
    113a:	91 05       	cpc	r25, r1
    113c:	a1 05       	cpc	r26, r1
    113e:	b1 05       	cpc	r27, r1
    1140:	98 f3       	brcs	.-26     	; 0x1128 <openingDoor_and_closingDoor+0x3e>

	DcMotor_Rotate(A_CW);
    1142:	82 e0       	ldi	r24, 0x02	; 2
    1144:	0e 94 1b 09 	call	0x1236	; 0x1236 <DcMotor_Rotate>

	while (g_ticks	< DOOR_OPENNING_TIME + DOOR_LEFT_OPEN_TIME + DOOR_CLOSING_TIME);
    1148:	80 91 72 00 	lds	r24, 0x0072
    114c:	90 91 73 00 	lds	r25, 0x0073
    1150:	a0 91 74 00 	lds	r26, 0x0074
    1154:	b0 91 75 00 	lds	r27, 0x0075
    1158:	84 38       	cpi	r24, 0x84	; 132
    115a:	91 05       	cpc	r25, r1
    115c:	a1 05       	cpc	r26, r1
    115e:	b1 05       	cpc	r27, r1
    1160:	98 f3       	brcs	.-26     	; 0x1148 <openingDoor_and_closingDoor+0x5e>

	DcMotor_Rotate(STOP);
    1162:	80 e0       	ldi	r24, 0x00	; 0
    1164:	0e 94 1b 09 	call	0x1236	; 0x1236 <DcMotor_Rotate>

}
    1168:	cf 91       	pop	r28
    116a:	df 91       	pop	r29
    116c:	08 95       	ret

0000116e <Danger_detected>:

void Danger_detected(void)
{
    116e:	df 93       	push	r29
    1170:	cf 93       	push	r28
    1172:	cd b7       	in	r28, 0x3d	; 61
    1174:	de b7       	in	r29, 0x3e	; 62
	g_ticks=0;
    1176:	10 92 72 00 	sts	0x0072, r1
    117a:	10 92 73 00 	sts	0x0073, r1
    117e:	10 92 74 00 	sts	0x0074, r1
    1182:	10 92 75 00 	sts	0x0075, r1
	BUZZER_ON();
    1186:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <BUZZER_ON>
	/*
	 * wait until finishing danger time
	 */
	while(g_ticks < DANGER_TIME);
    118a:	80 91 72 00 	lds	r24, 0x0072
    118e:	90 91 73 00 	lds	r25, 0x0073
    1192:	a0 91 74 00 	lds	r26, 0x0074
    1196:	b0 91 75 00 	lds	r27, 0x0075
    119a:	80 3f       	cpi	r24, 0xF0	; 240
    119c:	91 05       	cpc	r25, r1
    119e:	a1 05       	cpc	r26, r1
    11a0:	b1 05       	cpc	r27, r1
    11a2:	98 f3       	brcs	.-26     	; 0x118a <Danger_detected+0x1c>

	BUZZER_OFF();
    11a4:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <BUZZER_OFF>
}
    11a8:	cf 91       	pop	r28
    11aa:	df 91       	pop	r29
    11ac:	08 95       	ret

000011ae <BUZZER_init>:
 *******************************************************************************/

#include "buzzer.h"

void BUZZER_init(void)
{
    11ae:	df 93       	push	r29
    11b0:	cf 93       	push	r28
    11b2:	cd b7       	in	r28, 0x3d	; 61
    11b4:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
    11b6:	82 e0       	ldi	r24, 0x02	; 2
    11b8:	65 e0       	ldi	r22, 0x05	; 5
    11ba:	41 e0       	ldi	r20, 0x01	; 1
    11bc:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID,LOGIC_LOW );
    11c0:	82 e0       	ldi	r24, 0x02	; 2
    11c2:	65 e0       	ldi	r22, 0x05	; 5
    11c4:	40 e0       	ldi	r20, 0x00	; 0
    11c6:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <GPIO_writePin>
}
    11ca:	cf 91       	pop	r28
    11cc:	df 91       	pop	r29
    11ce:	08 95       	ret

000011d0 <BUZZER_ON>:

void BUZZER_ON(void)
{
    11d0:	df 93       	push	r29
    11d2:	cf 93       	push	r28
    11d4:	cd b7       	in	r28, 0x3d	; 61
    11d6:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH);
    11d8:	82 e0       	ldi	r24, 0x02	; 2
    11da:	65 e0       	ldi	r22, 0x05	; 5
    11dc:	41 e0       	ldi	r20, 0x01	; 1
    11de:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <GPIO_writePin>
}
    11e2:	cf 91       	pop	r28
    11e4:	df 91       	pop	r29
    11e6:	08 95       	ret

000011e8 <BUZZER_OFF>:

void BUZZER_OFF(void)
{
    11e8:	df 93       	push	r29
    11ea:	cf 93       	push	r28
    11ec:	cd b7       	in	r28, 0x3d	; 61
    11ee:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID,LOGIC_LOW );
    11f0:	82 e0       	ldi	r24, 0x02	; 2
    11f2:	65 e0       	ldi	r22, 0x05	; 5
    11f4:	40 e0       	ldi	r20, 0x00	; 0
    11f6:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <GPIO_writePin>
}
    11fa:	cf 91       	pop	r28
    11fc:	df 91       	pop	r29
    11fe:	08 95       	ret

00001200 <DcMotor_Init>:

#include "dc_motor.h"
#include "gpio.h"

void DcMotor_Init(void)
{
    1200:	df 93       	push	r29
    1202:	cf 93       	push	r28
    1204:	cd b7       	in	r28, 0x3d	; 61
    1206:	de b7       	in	r29, 0x3e	; 62
	/* Setup Motor pins as Output pins and
	 * write a Logic Low on them to stop at the DC-Motor at the beginning
	 */
	GPIO_setupPinDirection(DC_MOTOR_PORT_ID, DC_MOTOR_IN1_PIN_ID, PIN_OUTPUT);
    1208:	82 e0       	ldi	r24, 0x02	; 2
    120a:	66 e0       	ldi	r22, 0x06	; 6
    120c:	41 e0       	ldi	r20, 0x01	; 1
    120e:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT_ID, DC_MOTOR_IN2_PIN_ID, PIN_OUTPUT);
    1212:	82 e0       	ldi	r24, 0x02	; 2
    1214:	67 e0       	ldi	r22, 0x07	; 7
    1216:	41 e0       	ldi	r20, 0x01	; 1
    1218:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <GPIO_setupPinDirection>

	GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_IN1_PIN_ID, LOGIC_LOW);
    121c:	82 e0       	ldi	r24, 0x02	; 2
    121e:	66 e0       	ldi	r22, 0x06	; 6
    1220:	40 e0       	ldi	r20, 0x00	; 0
    1222:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_IN2_PIN_ID, LOGIC_LOW);
    1226:	82 e0       	ldi	r24, 0x02	; 2
    1228:	67 e0       	ldi	r22, 0x07	; 7
    122a:	40 e0       	ldi	r20, 0x00	; 0
    122c:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <GPIO_writePin>
}
    1230:	cf 91       	pop	r28
    1232:	df 91       	pop	r29
    1234:	08 95       	ret

00001236 <DcMotor_Rotate>:

void DcMotor_Rotate(DcMotor_State state)
{
    1236:	df 93       	push	r29
    1238:	cf 93       	push	r28
    123a:	00 d0       	rcall	.+0      	; 0x123c <DcMotor_Rotate+0x6>
    123c:	0f 92       	push	r0
    123e:	cd b7       	in	r28, 0x3d	; 61
    1240:	de b7       	in	r29, 0x3e	; 62
    1242:	89 83       	std	Y+1, r24	; 0x01
	/* The function responsible for rotate the DC Motor CW/ or A-CW or stop the motor based on the state input state value.
	 * Send the required duty cycle to the PWM driver based on the required speed value.
	 */
	switch(state)
    1244:	89 81       	ldd	r24, Y+1	; 0x01
    1246:	28 2f       	mov	r18, r24
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	3b 83       	std	Y+3, r19	; 0x03
    124c:	2a 83       	std	Y+2, r18	; 0x02
    124e:	8a 81       	ldd	r24, Y+2	; 0x02
    1250:	9b 81       	ldd	r25, Y+3	; 0x03
    1252:	81 30       	cpi	r24, 0x01	; 1
    1254:	91 05       	cpc	r25, r1
    1256:	a1 f0       	breq	.+40     	; 0x1280 <DcMotor_Rotate+0x4a>
    1258:	2a 81       	ldd	r18, Y+2	; 0x02
    125a:	3b 81       	ldd	r19, Y+3	; 0x03
    125c:	22 30       	cpi	r18, 0x02	; 2
    125e:	31 05       	cpc	r19, r1
    1260:	d1 f0       	breq	.+52     	; 0x1296 <DcMotor_Rotate+0x60>
    1262:	8a 81       	ldd	r24, Y+2	; 0x02
    1264:	9b 81       	ldd	r25, Y+3	; 0x03
    1266:	00 97       	sbiw	r24, 0x00	; 0
    1268:	01 f5       	brne	.+64     	; 0x12aa <DcMotor_Rotate+0x74>
	{
	case STOP:
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_IN1_PIN_ID, LOGIC_LOW);
    126a:	82 e0       	ldi	r24, 0x02	; 2
    126c:	66 e0       	ldi	r22, 0x06	; 6
    126e:	40 e0       	ldi	r20, 0x00	; 0
    1270:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_IN2_PIN_ID, LOGIC_LOW);
    1274:	82 e0       	ldi	r24, 0x02	; 2
    1276:	67 e0       	ldi	r22, 0x07	; 7
    1278:	40 e0       	ldi	r20, 0x00	; 0
    127a:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <GPIO_writePin>
    127e:	15 c0       	rjmp	.+42     	; 0x12aa <DcMotor_Rotate+0x74>
		break;
	case CW:
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_IN1_PIN_ID, LOGIC_HIGH);
    1280:	82 e0       	ldi	r24, 0x02	; 2
    1282:	66 e0       	ldi	r22, 0x06	; 6
    1284:	41 e0       	ldi	r20, 0x01	; 1
    1286:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_IN2_PIN_ID, LOGIC_LOW);
    128a:	82 e0       	ldi	r24, 0x02	; 2
    128c:	67 e0       	ldi	r22, 0x07	; 7
    128e:	40 e0       	ldi	r20, 0x00	; 0
    1290:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <GPIO_writePin>
    1294:	0a c0       	rjmp	.+20     	; 0x12aa <DcMotor_Rotate+0x74>
		break;
	case A_CW:
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_IN1_PIN_ID, LOGIC_LOW);
    1296:	82 e0       	ldi	r24, 0x02	; 2
    1298:	66 e0       	ldi	r22, 0x06	; 6
    129a:	40 e0       	ldi	r20, 0x00	; 0
    129c:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_IN2_PIN_ID, LOGIC_HIGH);
    12a0:	82 e0       	ldi	r24, 0x02	; 2
    12a2:	67 e0       	ldi	r22, 0x07	; 7
    12a4:	41 e0       	ldi	r20, 0x01	; 1
    12a6:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <GPIO_writePin>
		break;
	}
}
    12aa:	0f 90       	pop	r0
    12ac:	0f 90       	pop	r0
    12ae:	0f 90       	pop	r0
    12b0:	cf 91       	pop	r28
    12b2:	df 91       	pop	r29
    12b4:	08 95       	ret

000012b6 <EEPROM_writeByte>:
#include "external_eeprom.h"
#include "twi.h"


uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    12b6:	df 93       	push	r29
    12b8:	cf 93       	push	r28
    12ba:	00 d0       	rcall	.+0      	; 0x12bc <EEPROM_writeByte+0x6>
    12bc:	00 d0       	rcall	.+0      	; 0x12be <EEPROM_writeByte+0x8>
    12be:	cd b7       	in	r28, 0x3d	; 61
    12c0:	de b7       	in	r29, 0x3e	; 62
    12c2:	9a 83       	std	Y+2, r25	; 0x02
    12c4:	89 83       	std	Y+1, r24	; 0x01
    12c6:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    12c8:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <TWI_start>
    if (TWI_getStatus() != TWI_START)
    12cc:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <TWI_getStatus>
    12d0:	88 30       	cpi	r24, 0x08	; 8
    12d2:	11 f0       	breq	.+4      	; 0x12d8 <EEPROM_writeByte+0x22>
        return ERROR;
    12d4:	1c 82       	std	Y+4, r1	; 0x04
    12d6:	28 c0       	rjmp	.+80     	; 0x1328 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    12d8:	89 81       	ldd	r24, Y+1	; 0x01
    12da:	9a 81       	ldd	r25, Y+2	; 0x02
    12dc:	80 70       	andi	r24, 0x00	; 0
    12de:	97 70       	andi	r25, 0x07	; 7
    12e0:	88 0f       	add	r24, r24
    12e2:	89 2f       	mov	r24, r25
    12e4:	88 1f       	adc	r24, r24
    12e6:	99 0b       	sbc	r25, r25
    12e8:	91 95       	neg	r25
    12ea:	80 6a       	ori	r24, 0xA0	; 160
    12ec:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    12f0:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <TWI_getStatus>
    12f4:	88 31       	cpi	r24, 0x18	; 24
    12f6:	11 f0       	breq	.+4      	; 0x12fc <EEPROM_writeByte+0x46>
        return ERROR; 
    12f8:	1c 82       	std	Y+4, r1	; 0x04
    12fa:	16 c0       	rjmp	.+44     	; 0x1328 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    12fc:	89 81       	ldd	r24, Y+1	; 0x01
    12fe:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1302:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <TWI_getStatus>
    1306:	88 32       	cpi	r24, 0x28	; 40
    1308:	11 f0       	breq	.+4      	; 0x130e <EEPROM_writeByte+0x58>
        return ERROR;
    130a:	1c 82       	std	Y+4, r1	; 0x04
    130c:	0d c0       	rjmp	.+26     	; 0x1328 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    130e:	8b 81       	ldd	r24, Y+3	; 0x03
    1310:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1314:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <TWI_getStatus>
    1318:	88 32       	cpi	r24, 0x28	; 40
    131a:	11 f0       	breq	.+4      	; 0x1320 <EEPROM_writeByte+0x6a>
        return ERROR;
    131c:	1c 82       	std	Y+4, r1	; 0x04
    131e:	04 c0       	rjmp	.+8      	; 0x1328 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1320:	0e 94 56 0e 	call	0x1cac	; 0x1cac <TWI_stop>
	
    return SUCCESS;
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	8c 83       	std	Y+4, r24	; 0x04
    1328:	8c 81       	ldd	r24, Y+4	; 0x04
}
    132a:	0f 90       	pop	r0
    132c:	0f 90       	pop	r0
    132e:	0f 90       	pop	r0
    1330:	0f 90       	pop	r0
    1332:	cf 91       	pop	r28
    1334:	df 91       	pop	r29
    1336:	08 95       	ret

00001338 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1338:	df 93       	push	r29
    133a:	cf 93       	push	r28
    133c:	00 d0       	rcall	.+0      	; 0x133e <EEPROM_readByte+0x6>
    133e:	00 d0       	rcall	.+0      	; 0x1340 <EEPROM_readByte+0x8>
    1340:	0f 92       	push	r0
    1342:	cd b7       	in	r28, 0x3d	; 61
    1344:	de b7       	in	r29, 0x3e	; 62
    1346:	9a 83       	std	Y+2, r25	; 0x02
    1348:	89 83       	std	Y+1, r24	; 0x01
    134a:	7c 83       	std	Y+4, r23	; 0x04
    134c:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    134e:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1352:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <TWI_getStatus>
    1356:	88 30       	cpi	r24, 0x08	; 8
    1358:	11 f0       	breq	.+4      	; 0x135e <EEPROM_readByte+0x26>
        return ERROR;
    135a:	1d 82       	std	Y+5, r1	; 0x05
    135c:	44 c0       	rjmp	.+136    	; 0x13e6 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	9a 81       	ldd	r25, Y+2	; 0x02
    1362:	80 70       	andi	r24, 0x00	; 0
    1364:	97 70       	andi	r25, 0x07	; 7
    1366:	88 0f       	add	r24, r24
    1368:	89 2f       	mov	r24, r25
    136a:	88 1f       	adc	r24, r24
    136c:	99 0b       	sbc	r25, r25
    136e:	91 95       	neg	r25
    1370:	80 6a       	ori	r24, 0xA0	; 160
    1372:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1376:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <TWI_getStatus>
    137a:	88 31       	cpi	r24, 0x18	; 24
    137c:	11 f0       	breq	.+4      	; 0x1382 <EEPROM_readByte+0x4a>
        return ERROR;
    137e:	1d 82       	std	Y+5, r1	; 0x05
    1380:	32 c0       	rjmp	.+100    	; 0x13e6 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1382:	89 81       	ldd	r24, Y+1	; 0x01
    1384:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1388:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <TWI_getStatus>
    138c:	88 32       	cpi	r24, 0x28	; 40
    138e:	11 f0       	breq	.+4      	; 0x1394 <EEPROM_readByte+0x5c>
        return ERROR;
    1390:	1d 82       	std	Y+5, r1	; 0x05
    1392:	29 c0       	rjmp	.+82     	; 0x13e6 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1394:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1398:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <TWI_getStatus>
    139c:	80 31       	cpi	r24, 0x10	; 16
    139e:	11 f0       	breq	.+4      	; 0x13a4 <EEPROM_readByte+0x6c>
        return ERROR;
    13a0:	1d 82       	std	Y+5, r1	; 0x05
    13a2:	21 c0       	rjmp	.+66     	; 0x13e6 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    13a4:	89 81       	ldd	r24, Y+1	; 0x01
    13a6:	9a 81       	ldd	r25, Y+2	; 0x02
    13a8:	80 70       	andi	r24, 0x00	; 0
    13aa:	97 70       	andi	r25, 0x07	; 7
    13ac:	88 0f       	add	r24, r24
    13ae:	89 2f       	mov	r24, r25
    13b0:	88 1f       	adc	r24, r24
    13b2:	99 0b       	sbc	r25, r25
    13b4:	91 95       	neg	r25
    13b6:	81 6a       	ori	r24, 0xA1	; 161
    13b8:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    13bc:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <TWI_getStatus>
    13c0:	80 34       	cpi	r24, 0x40	; 64
    13c2:	11 f0       	breq	.+4      	; 0x13c8 <EEPROM_readByte+0x90>
        return ERROR;
    13c4:	1d 82       	std	Y+5, r1	; 0x05
    13c6:	0f c0       	rjmp	.+30     	; 0x13e6 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    13c8:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <TWI_readByteWithNACK>
    13cc:	eb 81       	ldd	r30, Y+3	; 0x03
    13ce:	fc 81       	ldd	r31, Y+4	; 0x04
    13d0:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    13d2:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <TWI_getStatus>
    13d6:	88 35       	cpi	r24, 0x58	; 88
    13d8:	11 f0       	breq	.+4      	; 0x13de <EEPROM_readByte+0xa6>
        return ERROR;
    13da:	1d 82       	std	Y+5, r1	; 0x05
    13dc:	04 c0       	rjmp	.+8      	; 0x13e6 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    13de:	0e 94 56 0e 	call	0x1cac	; 0x1cac <TWI_stop>

    return SUCCESS;
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	8d 83       	std	Y+5, r24	; 0x05
    13e6:	8d 81       	ldd	r24, Y+5	; 0x05
}
    13e8:	0f 90       	pop	r0
    13ea:	0f 90       	pop	r0
    13ec:	0f 90       	pop	r0
    13ee:	0f 90       	pop	r0
    13f0:	0f 90       	pop	r0
    13f2:	cf 91       	pop	r28
    13f4:	df 91       	pop	r29
    13f6:	08 95       	ret

000013f8 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    13f8:	df 93       	push	r29
    13fa:	cf 93       	push	r28
    13fc:	00 d0       	rcall	.+0      	; 0x13fe <GPIO_setupPinDirection+0x6>
    13fe:	00 d0       	rcall	.+0      	; 0x1400 <GPIO_setupPinDirection+0x8>
    1400:	0f 92       	push	r0
    1402:	cd b7       	in	r28, 0x3d	; 61
    1404:	de b7       	in	r29, 0x3e	; 62
    1406:	89 83       	std	Y+1, r24	; 0x01
    1408:	6a 83       	std	Y+2, r22	; 0x02
    140a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    140c:	8a 81       	ldd	r24, Y+2	; 0x02
    140e:	88 30       	cpi	r24, 0x08	; 8
    1410:	08 f0       	brcs	.+2      	; 0x1414 <GPIO_setupPinDirection+0x1c>
    1412:	d5 c0       	rjmp	.+426    	; 0x15be <GPIO_setupPinDirection+0x1c6>
    1414:	89 81       	ldd	r24, Y+1	; 0x01
    1416:	84 30       	cpi	r24, 0x04	; 4
    1418:	08 f0       	brcs	.+2      	; 0x141c <GPIO_setupPinDirection+0x24>
    141a:	d1 c0       	rjmp	.+418    	; 0x15be <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    141c:	89 81       	ldd	r24, Y+1	; 0x01
    141e:	28 2f       	mov	r18, r24
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	3d 83       	std	Y+5, r19	; 0x05
    1424:	2c 83       	std	Y+4, r18	; 0x04
    1426:	8c 81       	ldd	r24, Y+4	; 0x04
    1428:	9d 81       	ldd	r25, Y+5	; 0x05
    142a:	81 30       	cpi	r24, 0x01	; 1
    142c:	91 05       	cpc	r25, r1
    142e:	09 f4       	brne	.+2      	; 0x1432 <GPIO_setupPinDirection+0x3a>
    1430:	43 c0       	rjmp	.+134    	; 0x14b8 <GPIO_setupPinDirection+0xc0>
    1432:	2c 81       	ldd	r18, Y+4	; 0x04
    1434:	3d 81       	ldd	r19, Y+5	; 0x05
    1436:	22 30       	cpi	r18, 0x02	; 2
    1438:	31 05       	cpc	r19, r1
    143a:	2c f4       	brge	.+10     	; 0x1446 <GPIO_setupPinDirection+0x4e>
    143c:	8c 81       	ldd	r24, Y+4	; 0x04
    143e:	9d 81       	ldd	r25, Y+5	; 0x05
    1440:	00 97       	sbiw	r24, 0x00	; 0
    1442:	71 f0       	breq	.+28     	; 0x1460 <GPIO_setupPinDirection+0x68>
    1444:	bc c0       	rjmp	.+376    	; 0x15be <GPIO_setupPinDirection+0x1c6>
    1446:	2c 81       	ldd	r18, Y+4	; 0x04
    1448:	3d 81       	ldd	r19, Y+5	; 0x05
    144a:	22 30       	cpi	r18, 0x02	; 2
    144c:	31 05       	cpc	r19, r1
    144e:	09 f4       	brne	.+2      	; 0x1452 <GPIO_setupPinDirection+0x5a>
    1450:	5f c0       	rjmp	.+190    	; 0x1510 <GPIO_setupPinDirection+0x118>
    1452:	8c 81       	ldd	r24, Y+4	; 0x04
    1454:	9d 81       	ldd	r25, Y+5	; 0x05
    1456:	83 30       	cpi	r24, 0x03	; 3
    1458:	91 05       	cpc	r25, r1
    145a:	09 f4       	brne	.+2      	; 0x145e <GPIO_setupPinDirection+0x66>
    145c:	85 c0       	rjmp	.+266    	; 0x1568 <GPIO_setupPinDirection+0x170>
    145e:	af c0       	rjmp	.+350    	; 0x15be <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1460:	8b 81       	ldd	r24, Y+3	; 0x03
    1462:	81 30       	cpi	r24, 0x01	; 1
    1464:	a1 f4       	brne	.+40     	; 0x148e <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1466:	aa e3       	ldi	r26, 0x3A	; 58
    1468:	b0 e0       	ldi	r27, 0x00	; 0
    146a:	ea e3       	ldi	r30, 0x3A	; 58
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	80 81       	ld	r24, Z
    1470:	48 2f       	mov	r20, r24
    1472:	8a 81       	ldd	r24, Y+2	; 0x02
    1474:	28 2f       	mov	r18, r24
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	02 2e       	mov	r0, r18
    147e:	02 c0       	rjmp	.+4      	; 0x1484 <GPIO_setupPinDirection+0x8c>
    1480:	88 0f       	add	r24, r24
    1482:	99 1f       	adc	r25, r25
    1484:	0a 94       	dec	r0
    1486:	e2 f7       	brpl	.-8      	; 0x1480 <GPIO_setupPinDirection+0x88>
    1488:	84 2b       	or	r24, r20
    148a:	8c 93       	st	X, r24
    148c:	98 c0       	rjmp	.+304    	; 0x15be <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    148e:	aa e3       	ldi	r26, 0x3A	; 58
    1490:	b0 e0       	ldi	r27, 0x00	; 0
    1492:	ea e3       	ldi	r30, 0x3A	; 58
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	48 2f       	mov	r20, r24
    149a:	8a 81       	ldd	r24, Y+2	; 0x02
    149c:	28 2f       	mov	r18, r24
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	81 e0       	ldi	r24, 0x01	; 1
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	02 2e       	mov	r0, r18
    14a6:	02 c0       	rjmp	.+4      	; 0x14ac <GPIO_setupPinDirection+0xb4>
    14a8:	88 0f       	add	r24, r24
    14aa:	99 1f       	adc	r25, r25
    14ac:	0a 94       	dec	r0
    14ae:	e2 f7       	brpl	.-8      	; 0x14a8 <GPIO_setupPinDirection+0xb0>
    14b0:	80 95       	com	r24
    14b2:	84 23       	and	r24, r20
    14b4:	8c 93       	st	X, r24
    14b6:	83 c0       	rjmp	.+262    	; 0x15be <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    14b8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ba:	81 30       	cpi	r24, 0x01	; 1
    14bc:	a1 f4       	brne	.+40     	; 0x14e6 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    14be:	a7 e3       	ldi	r26, 0x37	; 55
    14c0:	b0 e0       	ldi	r27, 0x00	; 0
    14c2:	e7 e3       	ldi	r30, 0x37	; 55
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	80 81       	ld	r24, Z
    14c8:	48 2f       	mov	r20, r24
    14ca:	8a 81       	ldd	r24, Y+2	; 0x02
    14cc:	28 2f       	mov	r18, r24
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	81 e0       	ldi	r24, 0x01	; 1
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	02 2e       	mov	r0, r18
    14d6:	02 c0       	rjmp	.+4      	; 0x14dc <GPIO_setupPinDirection+0xe4>
    14d8:	88 0f       	add	r24, r24
    14da:	99 1f       	adc	r25, r25
    14dc:	0a 94       	dec	r0
    14de:	e2 f7       	brpl	.-8      	; 0x14d8 <GPIO_setupPinDirection+0xe0>
    14e0:	84 2b       	or	r24, r20
    14e2:	8c 93       	st	X, r24
    14e4:	6c c0       	rjmp	.+216    	; 0x15be <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    14e6:	a7 e3       	ldi	r26, 0x37	; 55
    14e8:	b0 e0       	ldi	r27, 0x00	; 0
    14ea:	e7 e3       	ldi	r30, 0x37	; 55
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	48 2f       	mov	r20, r24
    14f2:	8a 81       	ldd	r24, Y+2	; 0x02
    14f4:	28 2f       	mov	r18, r24
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	81 e0       	ldi	r24, 0x01	; 1
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	02 2e       	mov	r0, r18
    14fe:	02 c0       	rjmp	.+4      	; 0x1504 <GPIO_setupPinDirection+0x10c>
    1500:	88 0f       	add	r24, r24
    1502:	99 1f       	adc	r25, r25
    1504:	0a 94       	dec	r0
    1506:	e2 f7       	brpl	.-8      	; 0x1500 <GPIO_setupPinDirection+0x108>
    1508:	80 95       	com	r24
    150a:	84 23       	and	r24, r20
    150c:	8c 93       	st	X, r24
    150e:	57 c0       	rjmp	.+174    	; 0x15be <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1510:	8b 81       	ldd	r24, Y+3	; 0x03
    1512:	81 30       	cpi	r24, 0x01	; 1
    1514:	a1 f4       	brne	.+40     	; 0x153e <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1516:	a4 e3       	ldi	r26, 0x34	; 52
    1518:	b0 e0       	ldi	r27, 0x00	; 0
    151a:	e4 e3       	ldi	r30, 0x34	; 52
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	80 81       	ld	r24, Z
    1520:	48 2f       	mov	r20, r24
    1522:	8a 81       	ldd	r24, Y+2	; 0x02
    1524:	28 2f       	mov	r18, r24
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	81 e0       	ldi	r24, 0x01	; 1
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	02 2e       	mov	r0, r18
    152e:	02 c0       	rjmp	.+4      	; 0x1534 <GPIO_setupPinDirection+0x13c>
    1530:	88 0f       	add	r24, r24
    1532:	99 1f       	adc	r25, r25
    1534:	0a 94       	dec	r0
    1536:	e2 f7       	brpl	.-8      	; 0x1530 <GPIO_setupPinDirection+0x138>
    1538:	84 2b       	or	r24, r20
    153a:	8c 93       	st	X, r24
    153c:	40 c0       	rjmp	.+128    	; 0x15be <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    153e:	a4 e3       	ldi	r26, 0x34	; 52
    1540:	b0 e0       	ldi	r27, 0x00	; 0
    1542:	e4 e3       	ldi	r30, 0x34	; 52
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 81       	ld	r24, Z
    1548:	48 2f       	mov	r20, r24
    154a:	8a 81       	ldd	r24, Y+2	; 0x02
    154c:	28 2f       	mov	r18, r24
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	02 2e       	mov	r0, r18
    1556:	02 c0       	rjmp	.+4      	; 0x155c <GPIO_setupPinDirection+0x164>
    1558:	88 0f       	add	r24, r24
    155a:	99 1f       	adc	r25, r25
    155c:	0a 94       	dec	r0
    155e:	e2 f7       	brpl	.-8      	; 0x1558 <GPIO_setupPinDirection+0x160>
    1560:	80 95       	com	r24
    1562:	84 23       	and	r24, r20
    1564:	8c 93       	st	X, r24
    1566:	2b c0       	rjmp	.+86     	; 0x15be <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1568:	8b 81       	ldd	r24, Y+3	; 0x03
    156a:	81 30       	cpi	r24, 0x01	; 1
    156c:	a1 f4       	brne	.+40     	; 0x1596 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    156e:	a1 e3       	ldi	r26, 0x31	; 49
    1570:	b0 e0       	ldi	r27, 0x00	; 0
    1572:	e1 e3       	ldi	r30, 0x31	; 49
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	80 81       	ld	r24, Z
    1578:	48 2f       	mov	r20, r24
    157a:	8a 81       	ldd	r24, Y+2	; 0x02
    157c:	28 2f       	mov	r18, r24
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	02 2e       	mov	r0, r18
    1586:	02 c0       	rjmp	.+4      	; 0x158c <GPIO_setupPinDirection+0x194>
    1588:	88 0f       	add	r24, r24
    158a:	99 1f       	adc	r25, r25
    158c:	0a 94       	dec	r0
    158e:	e2 f7       	brpl	.-8      	; 0x1588 <GPIO_setupPinDirection+0x190>
    1590:	84 2b       	or	r24, r20
    1592:	8c 93       	st	X, r24
    1594:	14 c0       	rjmp	.+40     	; 0x15be <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1596:	a1 e3       	ldi	r26, 0x31	; 49
    1598:	b0 e0       	ldi	r27, 0x00	; 0
    159a:	e1 e3       	ldi	r30, 0x31	; 49
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	80 81       	ld	r24, Z
    15a0:	48 2f       	mov	r20, r24
    15a2:	8a 81       	ldd	r24, Y+2	; 0x02
    15a4:	28 2f       	mov	r18, r24
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	02 2e       	mov	r0, r18
    15ae:	02 c0       	rjmp	.+4      	; 0x15b4 <GPIO_setupPinDirection+0x1bc>
    15b0:	88 0f       	add	r24, r24
    15b2:	99 1f       	adc	r25, r25
    15b4:	0a 94       	dec	r0
    15b6:	e2 f7       	brpl	.-8      	; 0x15b0 <GPIO_setupPinDirection+0x1b8>
    15b8:	80 95       	com	r24
    15ba:	84 23       	and	r24, r20
    15bc:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    15be:	0f 90       	pop	r0
    15c0:	0f 90       	pop	r0
    15c2:	0f 90       	pop	r0
    15c4:	0f 90       	pop	r0
    15c6:	0f 90       	pop	r0
    15c8:	cf 91       	pop	r28
    15ca:	df 91       	pop	r29
    15cc:	08 95       	ret

000015ce <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    15ce:	df 93       	push	r29
    15d0:	cf 93       	push	r28
    15d2:	00 d0       	rcall	.+0      	; 0x15d4 <GPIO_writePin+0x6>
    15d4:	00 d0       	rcall	.+0      	; 0x15d6 <GPIO_writePin+0x8>
    15d6:	0f 92       	push	r0
    15d8:	cd b7       	in	r28, 0x3d	; 61
    15da:	de b7       	in	r29, 0x3e	; 62
    15dc:	89 83       	std	Y+1, r24	; 0x01
    15de:	6a 83       	std	Y+2, r22	; 0x02
    15e0:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    15e2:	8a 81       	ldd	r24, Y+2	; 0x02
    15e4:	88 30       	cpi	r24, 0x08	; 8
    15e6:	08 f0       	brcs	.+2      	; 0x15ea <GPIO_writePin+0x1c>
    15e8:	d5 c0       	rjmp	.+426    	; 0x1794 <GPIO_writePin+0x1c6>
    15ea:	89 81       	ldd	r24, Y+1	; 0x01
    15ec:	84 30       	cpi	r24, 0x04	; 4
    15ee:	08 f0       	brcs	.+2      	; 0x15f2 <GPIO_writePin+0x24>
    15f0:	d1 c0       	rjmp	.+418    	; 0x1794 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    15f2:	89 81       	ldd	r24, Y+1	; 0x01
    15f4:	28 2f       	mov	r18, r24
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	3d 83       	std	Y+5, r19	; 0x05
    15fa:	2c 83       	std	Y+4, r18	; 0x04
    15fc:	8c 81       	ldd	r24, Y+4	; 0x04
    15fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1600:	81 30       	cpi	r24, 0x01	; 1
    1602:	91 05       	cpc	r25, r1
    1604:	09 f4       	brne	.+2      	; 0x1608 <GPIO_writePin+0x3a>
    1606:	43 c0       	rjmp	.+134    	; 0x168e <GPIO_writePin+0xc0>
    1608:	2c 81       	ldd	r18, Y+4	; 0x04
    160a:	3d 81       	ldd	r19, Y+5	; 0x05
    160c:	22 30       	cpi	r18, 0x02	; 2
    160e:	31 05       	cpc	r19, r1
    1610:	2c f4       	brge	.+10     	; 0x161c <GPIO_writePin+0x4e>
    1612:	8c 81       	ldd	r24, Y+4	; 0x04
    1614:	9d 81       	ldd	r25, Y+5	; 0x05
    1616:	00 97       	sbiw	r24, 0x00	; 0
    1618:	71 f0       	breq	.+28     	; 0x1636 <GPIO_writePin+0x68>
    161a:	bc c0       	rjmp	.+376    	; 0x1794 <GPIO_writePin+0x1c6>
    161c:	2c 81       	ldd	r18, Y+4	; 0x04
    161e:	3d 81       	ldd	r19, Y+5	; 0x05
    1620:	22 30       	cpi	r18, 0x02	; 2
    1622:	31 05       	cpc	r19, r1
    1624:	09 f4       	brne	.+2      	; 0x1628 <GPIO_writePin+0x5a>
    1626:	5f c0       	rjmp	.+190    	; 0x16e6 <GPIO_writePin+0x118>
    1628:	8c 81       	ldd	r24, Y+4	; 0x04
    162a:	9d 81       	ldd	r25, Y+5	; 0x05
    162c:	83 30       	cpi	r24, 0x03	; 3
    162e:	91 05       	cpc	r25, r1
    1630:	09 f4       	brne	.+2      	; 0x1634 <GPIO_writePin+0x66>
    1632:	85 c0       	rjmp	.+266    	; 0x173e <GPIO_writePin+0x170>
    1634:	af c0       	rjmp	.+350    	; 0x1794 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1636:	8b 81       	ldd	r24, Y+3	; 0x03
    1638:	81 30       	cpi	r24, 0x01	; 1
    163a:	a1 f4       	brne	.+40     	; 0x1664 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    163c:	ab e3       	ldi	r26, 0x3B	; 59
    163e:	b0 e0       	ldi	r27, 0x00	; 0
    1640:	eb e3       	ldi	r30, 0x3B	; 59
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	80 81       	ld	r24, Z
    1646:	48 2f       	mov	r20, r24
    1648:	8a 81       	ldd	r24, Y+2	; 0x02
    164a:	28 2f       	mov	r18, r24
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	02 2e       	mov	r0, r18
    1654:	02 c0       	rjmp	.+4      	; 0x165a <GPIO_writePin+0x8c>
    1656:	88 0f       	add	r24, r24
    1658:	99 1f       	adc	r25, r25
    165a:	0a 94       	dec	r0
    165c:	e2 f7       	brpl	.-8      	; 0x1656 <GPIO_writePin+0x88>
    165e:	84 2b       	or	r24, r20
    1660:	8c 93       	st	X, r24
    1662:	98 c0       	rjmp	.+304    	; 0x1794 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1664:	ab e3       	ldi	r26, 0x3B	; 59
    1666:	b0 e0       	ldi	r27, 0x00	; 0
    1668:	eb e3       	ldi	r30, 0x3B	; 59
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	80 81       	ld	r24, Z
    166e:	48 2f       	mov	r20, r24
    1670:	8a 81       	ldd	r24, Y+2	; 0x02
    1672:	28 2f       	mov	r18, r24
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	02 2e       	mov	r0, r18
    167c:	02 c0       	rjmp	.+4      	; 0x1682 <GPIO_writePin+0xb4>
    167e:	88 0f       	add	r24, r24
    1680:	99 1f       	adc	r25, r25
    1682:	0a 94       	dec	r0
    1684:	e2 f7       	brpl	.-8      	; 0x167e <GPIO_writePin+0xb0>
    1686:	80 95       	com	r24
    1688:	84 23       	and	r24, r20
    168a:	8c 93       	st	X, r24
    168c:	83 c0       	rjmp	.+262    	; 0x1794 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    168e:	8b 81       	ldd	r24, Y+3	; 0x03
    1690:	81 30       	cpi	r24, 0x01	; 1
    1692:	a1 f4       	brne	.+40     	; 0x16bc <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1694:	a8 e3       	ldi	r26, 0x38	; 56
    1696:	b0 e0       	ldi	r27, 0x00	; 0
    1698:	e8 e3       	ldi	r30, 0x38	; 56
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	80 81       	ld	r24, Z
    169e:	48 2f       	mov	r20, r24
    16a0:	8a 81       	ldd	r24, Y+2	; 0x02
    16a2:	28 2f       	mov	r18, r24
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	81 e0       	ldi	r24, 0x01	; 1
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	02 2e       	mov	r0, r18
    16ac:	02 c0       	rjmp	.+4      	; 0x16b2 <GPIO_writePin+0xe4>
    16ae:	88 0f       	add	r24, r24
    16b0:	99 1f       	adc	r25, r25
    16b2:	0a 94       	dec	r0
    16b4:	e2 f7       	brpl	.-8      	; 0x16ae <GPIO_writePin+0xe0>
    16b6:	84 2b       	or	r24, r20
    16b8:	8c 93       	st	X, r24
    16ba:	6c c0       	rjmp	.+216    	; 0x1794 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    16bc:	a8 e3       	ldi	r26, 0x38	; 56
    16be:	b0 e0       	ldi	r27, 0x00	; 0
    16c0:	e8 e3       	ldi	r30, 0x38	; 56
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	80 81       	ld	r24, Z
    16c6:	48 2f       	mov	r20, r24
    16c8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ca:	28 2f       	mov	r18, r24
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	02 2e       	mov	r0, r18
    16d4:	02 c0       	rjmp	.+4      	; 0x16da <GPIO_writePin+0x10c>
    16d6:	88 0f       	add	r24, r24
    16d8:	99 1f       	adc	r25, r25
    16da:	0a 94       	dec	r0
    16dc:	e2 f7       	brpl	.-8      	; 0x16d6 <GPIO_writePin+0x108>
    16de:	80 95       	com	r24
    16e0:	84 23       	and	r24, r20
    16e2:	8c 93       	st	X, r24
    16e4:	57 c0       	rjmp	.+174    	; 0x1794 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    16e6:	8b 81       	ldd	r24, Y+3	; 0x03
    16e8:	81 30       	cpi	r24, 0x01	; 1
    16ea:	a1 f4       	brne	.+40     	; 0x1714 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    16ec:	a5 e3       	ldi	r26, 0x35	; 53
    16ee:	b0 e0       	ldi	r27, 0x00	; 0
    16f0:	e5 e3       	ldi	r30, 0x35	; 53
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	80 81       	ld	r24, Z
    16f6:	48 2f       	mov	r20, r24
    16f8:	8a 81       	ldd	r24, Y+2	; 0x02
    16fa:	28 2f       	mov	r18, r24
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	02 2e       	mov	r0, r18
    1704:	02 c0       	rjmp	.+4      	; 0x170a <GPIO_writePin+0x13c>
    1706:	88 0f       	add	r24, r24
    1708:	99 1f       	adc	r25, r25
    170a:	0a 94       	dec	r0
    170c:	e2 f7       	brpl	.-8      	; 0x1706 <GPIO_writePin+0x138>
    170e:	84 2b       	or	r24, r20
    1710:	8c 93       	st	X, r24
    1712:	40 c0       	rjmp	.+128    	; 0x1794 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1714:	a5 e3       	ldi	r26, 0x35	; 53
    1716:	b0 e0       	ldi	r27, 0x00	; 0
    1718:	e5 e3       	ldi	r30, 0x35	; 53
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	80 81       	ld	r24, Z
    171e:	48 2f       	mov	r20, r24
    1720:	8a 81       	ldd	r24, Y+2	; 0x02
    1722:	28 2f       	mov	r18, r24
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	81 e0       	ldi	r24, 0x01	; 1
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	02 2e       	mov	r0, r18
    172c:	02 c0       	rjmp	.+4      	; 0x1732 <GPIO_writePin+0x164>
    172e:	88 0f       	add	r24, r24
    1730:	99 1f       	adc	r25, r25
    1732:	0a 94       	dec	r0
    1734:	e2 f7       	brpl	.-8      	; 0x172e <GPIO_writePin+0x160>
    1736:	80 95       	com	r24
    1738:	84 23       	and	r24, r20
    173a:	8c 93       	st	X, r24
    173c:	2b c0       	rjmp	.+86     	; 0x1794 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    173e:	8b 81       	ldd	r24, Y+3	; 0x03
    1740:	81 30       	cpi	r24, 0x01	; 1
    1742:	a1 f4       	brne	.+40     	; 0x176c <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1744:	a2 e3       	ldi	r26, 0x32	; 50
    1746:	b0 e0       	ldi	r27, 0x00	; 0
    1748:	e2 e3       	ldi	r30, 0x32	; 50
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	80 81       	ld	r24, Z
    174e:	48 2f       	mov	r20, r24
    1750:	8a 81       	ldd	r24, Y+2	; 0x02
    1752:	28 2f       	mov	r18, r24
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	02 2e       	mov	r0, r18
    175c:	02 c0       	rjmp	.+4      	; 0x1762 <GPIO_writePin+0x194>
    175e:	88 0f       	add	r24, r24
    1760:	99 1f       	adc	r25, r25
    1762:	0a 94       	dec	r0
    1764:	e2 f7       	brpl	.-8      	; 0x175e <GPIO_writePin+0x190>
    1766:	84 2b       	or	r24, r20
    1768:	8c 93       	st	X, r24
    176a:	14 c0       	rjmp	.+40     	; 0x1794 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    176c:	a2 e3       	ldi	r26, 0x32	; 50
    176e:	b0 e0       	ldi	r27, 0x00	; 0
    1770:	e2 e3       	ldi	r30, 0x32	; 50
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	80 81       	ld	r24, Z
    1776:	48 2f       	mov	r20, r24
    1778:	8a 81       	ldd	r24, Y+2	; 0x02
    177a:	28 2f       	mov	r18, r24
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	02 2e       	mov	r0, r18
    1784:	02 c0       	rjmp	.+4      	; 0x178a <GPIO_writePin+0x1bc>
    1786:	88 0f       	add	r24, r24
    1788:	99 1f       	adc	r25, r25
    178a:	0a 94       	dec	r0
    178c:	e2 f7       	brpl	.-8      	; 0x1786 <GPIO_writePin+0x1b8>
    178e:	80 95       	com	r24
    1790:	84 23       	and	r24, r20
    1792:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1794:	0f 90       	pop	r0
    1796:	0f 90       	pop	r0
    1798:	0f 90       	pop	r0
    179a:	0f 90       	pop	r0
    179c:	0f 90       	pop	r0
    179e:	cf 91       	pop	r28
    17a0:	df 91       	pop	r29
    17a2:	08 95       	ret

000017a4 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    17a4:	df 93       	push	r29
    17a6:	cf 93       	push	r28
    17a8:	00 d0       	rcall	.+0      	; 0x17aa <GPIO_readPin+0x6>
    17aa:	00 d0       	rcall	.+0      	; 0x17ac <GPIO_readPin+0x8>
    17ac:	0f 92       	push	r0
    17ae:	cd b7       	in	r28, 0x3d	; 61
    17b0:	de b7       	in	r29, 0x3e	; 62
    17b2:	8a 83       	std	Y+2, r24	; 0x02
    17b4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    17b6:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    17b8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ba:	88 30       	cpi	r24, 0x08	; 8
    17bc:	08 f0       	brcs	.+2      	; 0x17c0 <GPIO_readPin+0x1c>
    17be:	84 c0       	rjmp	.+264    	; 0x18c8 <GPIO_readPin+0x124>
    17c0:	8a 81       	ldd	r24, Y+2	; 0x02
    17c2:	84 30       	cpi	r24, 0x04	; 4
    17c4:	08 f0       	brcs	.+2      	; 0x17c8 <GPIO_readPin+0x24>
    17c6:	80 c0       	rjmp	.+256    	; 0x18c8 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    17c8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ca:	28 2f       	mov	r18, r24
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	3d 83       	std	Y+5, r19	; 0x05
    17d0:	2c 83       	std	Y+4, r18	; 0x04
    17d2:	4c 81       	ldd	r20, Y+4	; 0x04
    17d4:	5d 81       	ldd	r21, Y+5	; 0x05
    17d6:	41 30       	cpi	r20, 0x01	; 1
    17d8:	51 05       	cpc	r21, r1
    17da:	79 f1       	breq	.+94     	; 0x183a <GPIO_readPin+0x96>
    17dc:	8c 81       	ldd	r24, Y+4	; 0x04
    17de:	9d 81       	ldd	r25, Y+5	; 0x05
    17e0:	82 30       	cpi	r24, 0x02	; 2
    17e2:	91 05       	cpc	r25, r1
    17e4:	34 f4       	brge	.+12     	; 0x17f2 <GPIO_readPin+0x4e>
    17e6:	2c 81       	ldd	r18, Y+4	; 0x04
    17e8:	3d 81       	ldd	r19, Y+5	; 0x05
    17ea:	21 15       	cp	r18, r1
    17ec:	31 05       	cpc	r19, r1
    17ee:	69 f0       	breq	.+26     	; 0x180a <GPIO_readPin+0x66>
    17f0:	6b c0       	rjmp	.+214    	; 0x18c8 <GPIO_readPin+0x124>
    17f2:	4c 81       	ldd	r20, Y+4	; 0x04
    17f4:	5d 81       	ldd	r21, Y+5	; 0x05
    17f6:	42 30       	cpi	r20, 0x02	; 2
    17f8:	51 05       	cpc	r21, r1
    17fa:	b9 f1       	breq	.+110    	; 0x186a <GPIO_readPin+0xc6>
    17fc:	8c 81       	ldd	r24, Y+4	; 0x04
    17fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1800:	83 30       	cpi	r24, 0x03	; 3
    1802:	91 05       	cpc	r25, r1
    1804:	09 f4       	brne	.+2      	; 0x1808 <GPIO_readPin+0x64>
    1806:	49 c0       	rjmp	.+146    	; 0x189a <GPIO_readPin+0xf6>
    1808:	5f c0       	rjmp	.+190    	; 0x18c8 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    180a:	e9 e3       	ldi	r30, 0x39	; 57
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	80 81       	ld	r24, Z
    1810:	28 2f       	mov	r18, r24
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	8b 81       	ldd	r24, Y+3	; 0x03
    1816:	88 2f       	mov	r24, r24
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	a9 01       	movw	r20, r18
    181c:	02 c0       	rjmp	.+4      	; 0x1822 <GPIO_readPin+0x7e>
    181e:	55 95       	asr	r21
    1820:	47 95       	ror	r20
    1822:	8a 95       	dec	r24
    1824:	e2 f7       	brpl	.-8      	; 0x181e <GPIO_readPin+0x7a>
    1826:	ca 01       	movw	r24, r20
    1828:	81 70       	andi	r24, 0x01	; 1
    182a:	90 70       	andi	r25, 0x00	; 0
    182c:	88 23       	and	r24, r24
    182e:	19 f0       	breq	.+6      	; 0x1836 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	89 83       	std	Y+1, r24	; 0x01
    1834:	49 c0       	rjmp	.+146    	; 0x18c8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1836:	19 82       	std	Y+1, r1	; 0x01
    1838:	47 c0       	rjmp	.+142    	; 0x18c8 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    183a:	e6 e3       	ldi	r30, 0x36	; 54
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	80 81       	ld	r24, Z
    1840:	28 2f       	mov	r18, r24
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	8b 81       	ldd	r24, Y+3	; 0x03
    1846:	88 2f       	mov	r24, r24
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	a9 01       	movw	r20, r18
    184c:	02 c0       	rjmp	.+4      	; 0x1852 <GPIO_readPin+0xae>
    184e:	55 95       	asr	r21
    1850:	47 95       	ror	r20
    1852:	8a 95       	dec	r24
    1854:	e2 f7       	brpl	.-8      	; 0x184e <GPIO_readPin+0xaa>
    1856:	ca 01       	movw	r24, r20
    1858:	81 70       	andi	r24, 0x01	; 1
    185a:	90 70       	andi	r25, 0x00	; 0
    185c:	88 23       	and	r24, r24
    185e:	19 f0       	breq	.+6      	; 0x1866 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1860:	81 e0       	ldi	r24, 0x01	; 1
    1862:	89 83       	std	Y+1, r24	; 0x01
    1864:	31 c0       	rjmp	.+98     	; 0x18c8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1866:	19 82       	std	Y+1, r1	; 0x01
    1868:	2f c0       	rjmp	.+94     	; 0x18c8 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    186a:	e3 e3       	ldi	r30, 0x33	; 51
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	80 81       	ld	r24, Z
    1870:	28 2f       	mov	r18, r24
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	8b 81       	ldd	r24, Y+3	; 0x03
    1876:	88 2f       	mov	r24, r24
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	a9 01       	movw	r20, r18
    187c:	02 c0       	rjmp	.+4      	; 0x1882 <GPIO_readPin+0xde>
    187e:	55 95       	asr	r21
    1880:	47 95       	ror	r20
    1882:	8a 95       	dec	r24
    1884:	e2 f7       	brpl	.-8      	; 0x187e <GPIO_readPin+0xda>
    1886:	ca 01       	movw	r24, r20
    1888:	81 70       	andi	r24, 0x01	; 1
    188a:	90 70       	andi	r25, 0x00	; 0
    188c:	88 23       	and	r24, r24
    188e:	19 f0       	breq	.+6      	; 0x1896 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	89 83       	std	Y+1, r24	; 0x01
    1894:	19 c0       	rjmp	.+50     	; 0x18c8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1896:	19 82       	std	Y+1, r1	; 0x01
    1898:	17 c0       	rjmp	.+46     	; 0x18c8 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    189a:	e0 e3       	ldi	r30, 0x30	; 48
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	80 81       	ld	r24, Z
    18a0:	28 2f       	mov	r18, r24
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	8b 81       	ldd	r24, Y+3	; 0x03
    18a6:	88 2f       	mov	r24, r24
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	a9 01       	movw	r20, r18
    18ac:	02 c0       	rjmp	.+4      	; 0x18b2 <GPIO_readPin+0x10e>
    18ae:	55 95       	asr	r21
    18b0:	47 95       	ror	r20
    18b2:	8a 95       	dec	r24
    18b4:	e2 f7       	brpl	.-8      	; 0x18ae <GPIO_readPin+0x10a>
    18b6:	ca 01       	movw	r24, r20
    18b8:	81 70       	andi	r24, 0x01	; 1
    18ba:	90 70       	andi	r25, 0x00	; 0
    18bc:	88 23       	and	r24, r24
    18be:	19 f0       	breq	.+6      	; 0x18c6 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    18c0:	81 e0       	ldi	r24, 0x01	; 1
    18c2:	89 83       	std	Y+1, r24	; 0x01
    18c4:	01 c0       	rjmp	.+2      	; 0x18c8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    18c6:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    18c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    18ca:	0f 90       	pop	r0
    18cc:	0f 90       	pop	r0
    18ce:	0f 90       	pop	r0
    18d0:	0f 90       	pop	r0
    18d2:	0f 90       	pop	r0
    18d4:	cf 91       	pop	r28
    18d6:	df 91       	pop	r29
    18d8:	08 95       	ret

000018da <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    18da:	df 93       	push	r29
    18dc:	cf 93       	push	r28
    18de:	00 d0       	rcall	.+0      	; 0x18e0 <GPIO_setupPortDirection+0x6>
    18e0:	00 d0       	rcall	.+0      	; 0x18e2 <GPIO_setupPortDirection+0x8>
    18e2:	cd b7       	in	r28, 0x3d	; 61
    18e4:	de b7       	in	r29, 0x3e	; 62
    18e6:	89 83       	std	Y+1, r24	; 0x01
    18e8:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    18ea:	89 81       	ldd	r24, Y+1	; 0x01
    18ec:	84 30       	cpi	r24, 0x04	; 4
    18ee:	90 f5       	brcc	.+100    	; 0x1954 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    18f0:	89 81       	ldd	r24, Y+1	; 0x01
    18f2:	28 2f       	mov	r18, r24
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	3c 83       	std	Y+4, r19	; 0x04
    18f8:	2b 83       	std	Y+3, r18	; 0x03
    18fa:	8b 81       	ldd	r24, Y+3	; 0x03
    18fc:	9c 81       	ldd	r25, Y+4	; 0x04
    18fe:	81 30       	cpi	r24, 0x01	; 1
    1900:	91 05       	cpc	r25, r1
    1902:	d1 f0       	breq	.+52     	; 0x1938 <GPIO_setupPortDirection+0x5e>
    1904:	2b 81       	ldd	r18, Y+3	; 0x03
    1906:	3c 81       	ldd	r19, Y+4	; 0x04
    1908:	22 30       	cpi	r18, 0x02	; 2
    190a:	31 05       	cpc	r19, r1
    190c:	2c f4       	brge	.+10     	; 0x1918 <GPIO_setupPortDirection+0x3e>
    190e:	8b 81       	ldd	r24, Y+3	; 0x03
    1910:	9c 81       	ldd	r25, Y+4	; 0x04
    1912:	00 97       	sbiw	r24, 0x00	; 0
    1914:	61 f0       	breq	.+24     	; 0x192e <GPIO_setupPortDirection+0x54>
    1916:	1e c0       	rjmp	.+60     	; 0x1954 <GPIO_setupPortDirection+0x7a>
    1918:	2b 81       	ldd	r18, Y+3	; 0x03
    191a:	3c 81       	ldd	r19, Y+4	; 0x04
    191c:	22 30       	cpi	r18, 0x02	; 2
    191e:	31 05       	cpc	r19, r1
    1920:	81 f0       	breq	.+32     	; 0x1942 <GPIO_setupPortDirection+0x68>
    1922:	8b 81       	ldd	r24, Y+3	; 0x03
    1924:	9c 81       	ldd	r25, Y+4	; 0x04
    1926:	83 30       	cpi	r24, 0x03	; 3
    1928:	91 05       	cpc	r25, r1
    192a:	81 f0       	breq	.+32     	; 0x194c <GPIO_setupPortDirection+0x72>
    192c:	13 c0       	rjmp	.+38     	; 0x1954 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    192e:	ea e3       	ldi	r30, 0x3A	; 58
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	8a 81       	ldd	r24, Y+2	; 0x02
    1934:	80 83       	st	Z, r24
    1936:	0e c0       	rjmp	.+28     	; 0x1954 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1938:	e7 e3       	ldi	r30, 0x37	; 55
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	8a 81       	ldd	r24, Y+2	; 0x02
    193e:	80 83       	st	Z, r24
    1940:	09 c0       	rjmp	.+18     	; 0x1954 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1942:	e4 e3       	ldi	r30, 0x34	; 52
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	8a 81       	ldd	r24, Y+2	; 0x02
    1948:	80 83       	st	Z, r24
    194a:	04 c0       	rjmp	.+8      	; 0x1954 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    194c:	e1 e3       	ldi	r30, 0x31	; 49
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	8a 81       	ldd	r24, Y+2	; 0x02
    1952:	80 83       	st	Z, r24
			break;
		}
	}
}
    1954:	0f 90       	pop	r0
    1956:	0f 90       	pop	r0
    1958:	0f 90       	pop	r0
    195a:	0f 90       	pop	r0
    195c:	cf 91       	pop	r28
    195e:	df 91       	pop	r29
    1960:	08 95       	ret

00001962 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1962:	df 93       	push	r29
    1964:	cf 93       	push	r28
    1966:	00 d0       	rcall	.+0      	; 0x1968 <GPIO_writePort+0x6>
    1968:	00 d0       	rcall	.+0      	; 0x196a <GPIO_writePort+0x8>
    196a:	cd b7       	in	r28, 0x3d	; 61
    196c:	de b7       	in	r29, 0x3e	; 62
    196e:	89 83       	std	Y+1, r24	; 0x01
    1970:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1972:	89 81       	ldd	r24, Y+1	; 0x01
    1974:	84 30       	cpi	r24, 0x04	; 4
    1976:	90 f5       	brcc	.+100    	; 0x19dc <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1978:	89 81       	ldd	r24, Y+1	; 0x01
    197a:	28 2f       	mov	r18, r24
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	3c 83       	std	Y+4, r19	; 0x04
    1980:	2b 83       	std	Y+3, r18	; 0x03
    1982:	8b 81       	ldd	r24, Y+3	; 0x03
    1984:	9c 81       	ldd	r25, Y+4	; 0x04
    1986:	81 30       	cpi	r24, 0x01	; 1
    1988:	91 05       	cpc	r25, r1
    198a:	d1 f0       	breq	.+52     	; 0x19c0 <GPIO_writePort+0x5e>
    198c:	2b 81       	ldd	r18, Y+3	; 0x03
    198e:	3c 81       	ldd	r19, Y+4	; 0x04
    1990:	22 30       	cpi	r18, 0x02	; 2
    1992:	31 05       	cpc	r19, r1
    1994:	2c f4       	brge	.+10     	; 0x19a0 <GPIO_writePort+0x3e>
    1996:	8b 81       	ldd	r24, Y+3	; 0x03
    1998:	9c 81       	ldd	r25, Y+4	; 0x04
    199a:	00 97       	sbiw	r24, 0x00	; 0
    199c:	61 f0       	breq	.+24     	; 0x19b6 <GPIO_writePort+0x54>
    199e:	1e c0       	rjmp	.+60     	; 0x19dc <GPIO_writePort+0x7a>
    19a0:	2b 81       	ldd	r18, Y+3	; 0x03
    19a2:	3c 81       	ldd	r19, Y+4	; 0x04
    19a4:	22 30       	cpi	r18, 0x02	; 2
    19a6:	31 05       	cpc	r19, r1
    19a8:	81 f0       	breq	.+32     	; 0x19ca <GPIO_writePort+0x68>
    19aa:	8b 81       	ldd	r24, Y+3	; 0x03
    19ac:	9c 81       	ldd	r25, Y+4	; 0x04
    19ae:	83 30       	cpi	r24, 0x03	; 3
    19b0:	91 05       	cpc	r25, r1
    19b2:	81 f0       	breq	.+32     	; 0x19d4 <GPIO_writePort+0x72>
    19b4:	13 c0       	rjmp	.+38     	; 0x19dc <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    19b6:	eb e3       	ldi	r30, 0x3B	; 59
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	8a 81       	ldd	r24, Y+2	; 0x02
    19bc:	80 83       	st	Z, r24
    19be:	0e c0       	rjmp	.+28     	; 0x19dc <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    19c0:	e8 e3       	ldi	r30, 0x38	; 56
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	8a 81       	ldd	r24, Y+2	; 0x02
    19c6:	80 83       	st	Z, r24
    19c8:	09 c0       	rjmp	.+18     	; 0x19dc <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    19ca:	e5 e3       	ldi	r30, 0x35	; 53
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	8a 81       	ldd	r24, Y+2	; 0x02
    19d0:	80 83       	st	Z, r24
    19d2:	04 c0       	rjmp	.+8      	; 0x19dc <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    19d4:	e2 e3       	ldi	r30, 0x32	; 50
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	8a 81       	ldd	r24, Y+2	; 0x02
    19da:	80 83       	st	Z, r24
			break;
		}
	}
}
    19dc:	0f 90       	pop	r0
    19de:	0f 90       	pop	r0
    19e0:	0f 90       	pop	r0
    19e2:	0f 90       	pop	r0
    19e4:	cf 91       	pop	r28
    19e6:	df 91       	pop	r29
    19e8:	08 95       	ret

000019ea <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    19ea:	df 93       	push	r29
    19ec:	cf 93       	push	r28
    19ee:	00 d0       	rcall	.+0      	; 0x19f0 <GPIO_readPort+0x6>
    19f0:	00 d0       	rcall	.+0      	; 0x19f2 <GPIO_readPort+0x8>
    19f2:	cd b7       	in	r28, 0x3d	; 61
    19f4:	de b7       	in	r29, 0x3e	; 62
    19f6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    19f8:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    19fa:	8a 81       	ldd	r24, Y+2	; 0x02
    19fc:	84 30       	cpi	r24, 0x04	; 4
    19fe:	90 f5       	brcc	.+100    	; 0x1a64 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1a00:	8a 81       	ldd	r24, Y+2	; 0x02
    1a02:	28 2f       	mov	r18, r24
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	3c 83       	std	Y+4, r19	; 0x04
    1a08:	2b 83       	std	Y+3, r18	; 0x03
    1a0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a0e:	81 30       	cpi	r24, 0x01	; 1
    1a10:	91 05       	cpc	r25, r1
    1a12:	d1 f0       	breq	.+52     	; 0x1a48 <GPIO_readPort+0x5e>
    1a14:	2b 81       	ldd	r18, Y+3	; 0x03
    1a16:	3c 81       	ldd	r19, Y+4	; 0x04
    1a18:	22 30       	cpi	r18, 0x02	; 2
    1a1a:	31 05       	cpc	r19, r1
    1a1c:	2c f4       	brge	.+10     	; 0x1a28 <GPIO_readPort+0x3e>
    1a1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a20:	9c 81       	ldd	r25, Y+4	; 0x04
    1a22:	00 97       	sbiw	r24, 0x00	; 0
    1a24:	61 f0       	breq	.+24     	; 0x1a3e <GPIO_readPort+0x54>
    1a26:	1e c0       	rjmp	.+60     	; 0x1a64 <GPIO_readPort+0x7a>
    1a28:	2b 81       	ldd	r18, Y+3	; 0x03
    1a2a:	3c 81       	ldd	r19, Y+4	; 0x04
    1a2c:	22 30       	cpi	r18, 0x02	; 2
    1a2e:	31 05       	cpc	r19, r1
    1a30:	81 f0       	breq	.+32     	; 0x1a52 <GPIO_readPort+0x68>
    1a32:	8b 81       	ldd	r24, Y+3	; 0x03
    1a34:	9c 81       	ldd	r25, Y+4	; 0x04
    1a36:	83 30       	cpi	r24, 0x03	; 3
    1a38:	91 05       	cpc	r25, r1
    1a3a:	81 f0       	breq	.+32     	; 0x1a5c <GPIO_readPort+0x72>
    1a3c:	13 c0       	rjmp	.+38     	; 0x1a64 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1a3e:	e9 e3       	ldi	r30, 0x39	; 57
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	80 81       	ld	r24, Z
    1a44:	89 83       	std	Y+1, r24	; 0x01
    1a46:	0e c0       	rjmp	.+28     	; 0x1a64 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1a48:	e6 e3       	ldi	r30, 0x36	; 54
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	80 81       	ld	r24, Z
    1a4e:	89 83       	std	Y+1, r24	; 0x01
    1a50:	09 c0       	rjmp	.+18     	; 0x1a64 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1a52:	e3 e3       	ldi	r30, 0x33	; 51
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	80 81       	ld	r24, Z
    1a58:	89 83       	std	Y+1, r24	; 0x01
    1a5a:	04 c0       	rjmp	.+8      	; 0x1a64 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1a5c:	e0 e3       	ldi	r30, 0x30	; 48
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	80 81       	ld	r24, Z
    1a62:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1a64:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a66:	0f 90       	pop	r0
    1a68:	0f 90       	pop	r0
    1a6a:	0f 90       	pop	r0
    1a6c:	0f 90       	pop	r0
    1a6e:	cf 91       	pop	r28
    1a70:	df 91       	pop	r29
    1a72:	08 95       	ret

00001a74 <__vector_9>:

/* Global variables to hold the address of the call back function in the application */
static volatile void (*g_callBackPtr)(void) = NULL_PTR;

ISR (TIMER0_OVF_vect)
{
    1a74:	1f 92       	push	r1
    1a76:	0f 92       	push	r0
    1a78:	0f b6       	in	r0, 0x3f	; 63
    1a7a:	0f 92       	push	r0
    1a7c:	11 24       	eor	r1, r1
    1a7e:	2f 93       	push	r18
    1a80:	3f 93       	push	r19
    1a82:	4f 93       	push	r20
    1a84:	5f 93       	push	r21
    1a86:	6f 93       	push	r22
    1a88:	7f 93       	push	r23
    1a8a:	8f 93       	push	r24
    1a8c:	9f 93       	push	r25
    1a8e:	af 93       	push	r26
    1a90:	bf 93       	push	r27
    1a92:	ef 93       	push	r30
    1a94:	ff 93       	push	r31
    1a96:	df 93       	push	r29
    1a98:	cf 93       	push	r28
    1a9a:	cd b7       	in	r28, 0x3d	; 61
    1a9c:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1a9e:	80 91 76 00 	lds	r24, 0x0076
    1aa2:	90 91 77 00 	lds	r25, 0x0077
    1aa6:	00 97       	sbiw	r24, 0x00	; 0
    1aa8:	29 f0       	breq	.+10     	; 0x1ab4 <__vector_9+0x40>
		{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1aaa:	e0 91 76 00 	lds	r30, 0x0076
    1aae:	f0 91 77 00 	lds	r31, 0x0077
    1ab2:	09 95       	icall
		}
}
    1ab4:	cf 91       	pop	r28
    1ab6:	df 91       	pop	r29
    1ab8:	ff 91       	pop	r31
    1aba:	ef 91       	pop	r30
    1abc:	bf 91       	pop	r27
    1abe:	af 91       	pop	r26
    1ac0:	9f 91       	pop	r25
    1ac2:	8f 91       	pop	r24
    1ac4:	7f 91       	pop	r23
    1ac6:	6f 91       	pop	r22
    1ac8:	5f 91       	pop	r21
    1aca:	4f 91       	pop	r20
    1acc:	3f 91       	pop	r19
    1ace:	2f 91       	pop	r18
    1ad0:	0f 90       	pop	r0
    1ad2:	0f be       	out	0x3f, r0	; 63
    1ad4:	0f 90       	pop	r0
    1ad6:	1f 90       	pop	r1
    1ad8:	18 95       	reti

00001ada <__vector_19>:

ISR (TIMER0_COMP_vect)
{
    1ada:	1f 92       	push	r1
    1adc:	0f 92       	push	r0
    1ade:	0f b6       	in	r0, 0x3f	; 63
    1ae0:	0f 92       	push	r0
    1ae2:	11 24       	eor	r1, r1
    1ae4:	2f 93       	push	r18
    1ae6:	3f 93       	push	r19
    1ae8:	4f 93       	push	r20
    1aea:	5f 93       	push	r21
    1aec:	6f 93       	push	r22
    1aee:	7f 93       	push	r23
    1af0:	8f 93       	push	r24
    1af2:	9f 93       	push	r25
    1af4:	af 93       	push	r26
    1af6:	bf 93       	push	r27
    1af8:	ef 93       	push	r30
    1afa:	ff 93       	push	r31
    1afc:	df 93       	push	r29
    1afe:	cf 93       	push	r28
    1b00:	cd b7       	in	r28, 0x3d	; 61
    1b02:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1b04:	80 91 76 00 	lds	r24, 0x0076
    1b08:	90 91 77 00 	lds	r25, 0x0077
    1b0c:	00 97       	sbiw	r24, 0x00	; 0
    1b0e:	29 f0       	breq	.+10     	; 0x1b1a <__vector_19+0x40>
		{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1b10:	e0 91 76 00 	lds	r30, 0x0076
    1b14:	f0 91 77 00 	lds	r31, 0x0077
    1b18:	09 95       	icall
		}
}
    1b1a:	cf 91       	pop	r28
    1b1c:	df 91       	pop	r29
    1b1e:	ff 91       	pop	r31
    1b20:	ef 91       	pop	r30
    1b22:	bf 91       	pop	r27
    1b24:	af 91       	pop	r26
    1b26:	9f 91       	pop	r25
    1b28:	8f 91       	pop	r24
    1b2a:	7f 91       	pop	r23
    1b2c:	6f 91       	pop	r22
    1b2e:	5f 91       	pop	r21
    1b30:	4f 91       	pop	r20
    1b32:	3f 91       	pop	r19
    1b34:	2f 91       	pop	r18
    1b36:	0f 90       	pop	r0
    1b38:	0f be       	out	0x3f, r0	; 63
    1b3a:	0f 90       	pop	r0
    1b3c:	1f 90       	pop	r1
    1b3e:	18 95       	reti

00001b40 <Timer0_init>:

void Timer0_init(const Timer0_ConfigType *Config_ptr)
{
    1b40:	df 93       	push	r29
    1b42:	cf 93       	push	r28
    1b44:	00 d0       	rcall	.+0      	; 0x1b46 <Timer0_init+0x6>
    1b46:	cd b7       	in	r28, 0x3d	; 61
    1b48:	de b7       	in	r29, 0x3e	; 62
    1b4a:	9a 83       	std	Y+2, r25	; 0x02
    1b4c:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Config_ptr->initialValue;
    1b4e:	a2 e5       	ldi	r26, 0x52	; 82
    1b50:	b0 e0       	ldi	r27, 0x00	; 0
    1b52:	e9 81       	ldd	r30, Y+1	; 0x01
    1b54:	fa 81       	ldd	r31, Y+2	; 0x02
    1b56:	82 81       	ldd	r24, Z+2	; 0x02
    1b58:	8c 93       	st	X, r24
	if (Config_ptr->mode == NORMAL_MODE)
    1b5a:	e9 81       	ldd	r30, Y+1	; 0x01
    1b5c:	fa 81       	ldd	r31, Y+2	; 0x02
    1b5e:	80 81       	ld	r24, Z
    1b60:	88 23       	and	r24, r24
    1b62:	d9 f4       	brne	.+54     	; 0x1b9a <Timer0_init+0x5a>
	{
		TCCR0|=(1<<FOC0);
    1b64:	a3 e5       	ldi	r26, 0x53	; 83
    1b66:	b0 e0       	ldi	r27, 0x00	; 0
    1b68:	e3 e5       	ldi	r30, 0x53	; 83
    1b6a:	f0 e0       	ldi	r31, 0x00	; 0
    1b6c:	80 81       	ld	r24, Z
    1b6e:	80 68       	ori	r24, 0x80	; 128
    1b70:	8c 93       	st	X, r24
		TIMSK|=(1<<TOIE0);
    1b72:	a9 e5       	ldi	r26, 0x59	; 89
    1b74:	b0 e0       	ldi	r27, 0x00	; 0
    1b76:	e9 e5       	ldi	r30, 0x59	; 89
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	80 81       	ld	r24, Z
    1b7c:	81 60       	ori	r24, 0x01	; 1
    1b7e:	8c 93       	st	X, r24
		TCCR0 = (TCCR0 & 0xF8) | (Config_ptr->clock);
    1b80:	a3 e5       	ldi	r26, 0x53	; 83
    1b82:	b0 e0       	ldi	r27, 0x00	; 0
    1b84:	e3 e5       	ldi	r30, 0x53	; 83
    1b86:	f0 e0       	ldi	r31, 0x00	; 0
    1b88:	80 81       	ld	r24, Z
    1b8a:	98 2f       	mov	r25, r24
    1b8c:	98 7f       	andi	r25, 0xF8	; 248
    1b8e:	e9 81       	ldd	r30, Y+1	; 0x01
    1b90:	fa 81       	ldd	r31, Y+2	; 0x02
    1b92:	81 81       	ldd	r24, Z+1	; 0x01
    1b94:	89 2b       	or	r24, r25
    1b96:	8c 93       	st	X, r24
    1b98:	2c c0       	rjmp	.+88     	; 0x1bf2 <Timer0_init+0xb2>
	}
	else if (Config_ptr->mode == COMPARE_MODE)
    1b9a:	e9 81       	ldd	r30, Y+1	; 0x01
    1b9c:	fa 81       	ldd	r31, Y+2	; 0x02
    1b9e:	80 81       	ld	r24, Z
    1ba0:	82 30       	cpi	r24, 0x02	; 2
    1ba2:	39 f5       	brne	.+78     	; 0x1bf2 <Timer0_init+0xb2>
	{
		TCCR0 |= (1 << FOC0);
    1ba4:	a3 e5       	ldi	r26, 0x53	; 83
    1ba6:	b0 e0       	ldi	r27, 0x00	; 0
    1ba8:	e3 e5       	ldi	r30, 0x53	; 83
    1baa:	f0 e0       	ldi	r31, 0x00	; 0
    1bac:	80 81       	ld	r24, Z
    1bae:	80 68       	ori	r24, 0x80	; 128
    1bb0:	8c 93       	st	X, r24
		TCCR0 |= (1 << WGM01);
    1bb2:	a3 e5       	ldi	r26, 0x53	; 83
    1bb4:	b0 e0       	ldi	r27, 0x00	; 0
    1bb6:	e3 e5       	ldi	r30, 0x53	; 83
    1bb8:	f0 e0       	ldi	r31, 0x00	; 0
    1bba:	80 81       	ld	r24, Z
    1bbc:	88 60       	ori	r24, 0x08	; 8
    1bbe:	8c 93       	st	X, r24
		TIMSK |= (1 << OCIE0);
    1bc0:	a9 e5       	ldi	r26, 0x59	; 89
    1bc2:	b0 e0       	ldi	r27, 0x00	; 0
    1bc4:	e9 e5       	ldi	r30, 0x59	; 89
    1bc6:	f0 e0       	ldi	r31, 0x00	; 0
    1bc8:	80 81       	ld	r24, Z
    1bca:	82 60       	ori	r24, 0x02	; 2
    1bcc:	8c 93       	st	X, r24
		OCR0 = Config_ptr->compareValue;
    1bce:	ac e5       	ldi	r26, 0x5C	; 92
    1bd0:	b0 e0       	ldi	r27, 0x00	; 0
    1bd2:	e9 81       	ldd	r30, Y+1	; 0x01
    1bd4:	fa 81       	ldd	r31, Y+2	; 0x02
    1bd6:	83 81       	ldd	r24, Z+3	; 0x03
    1bd8:	8c 93       	st	X, r24
		TCCR0 = (TCCR0 & 0xF8) | (Config_ptr->clock);
    1bda:	a3 e5       	ldi	r26, 0x53	; 83
    1bdc:	b0 e0       	ldi	r27, 0x00	; 0
    1bde:	e3 e5       	ldi	r30, 0x53	; 83
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	80 81       	ld	r24, Z
    1be4:	98 2f       	mov	r25, r24
    1be6:	98 7f       	andi	r25, 0xF8	; 248
    1be8:	e9 81       	ldd	r30, Y+1	; 0x01
    1bea:	fa 81       	ldd	r31, Y+2	; 0x02
    1bec:	81 81       	ldd	r24, Z+1	; 0x01
    1bee:	89 2b       	or	r24, r25
    1bf0:	8c 93       	st	X, r24
	}
}
    1bf2:	0f 90       	pop	r0
    1bf4:	0f 90       	pop	r0
    1bf6:	cf 91       	pop	r28
    1bf8:	df 91       	pop	r29
    1bfa:	08 95       	ret

00001bfc <Timer0_SetCallBack>:

void Timer0_SetCallBack( void(*a_ptr)(void) )
{
    1bfc:	df 93       	push	r29
    1bfe:	cf 93       	push	r28
    1c00:	00 d0       	rcall	.+0      	; 0x1c02 <Timer0_SetCallBack+0x6>
    1c02:	cd b7       	in	r28, 0x3d	; 61
    1c04:	de b7       	in	r29, 0x3e	; 62
    1c06:	9a 83       	std	Y+2, r25	; 0x02
    1c08:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr=a_ptr;
    1c0a:	89 81       	ldd	r24, Y+1	; 0x01
    1c0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c0e:	90 93 77 00 	sts	0x0077, r25
    1c12:	80 93 76 00 	sts	0x0076, r24
}
    1c16:	0f 90       	pop	r0
    1c18:	0f 90       	pop	r0
    1c1a:	cf 91       	pop	r28
    1c1c:	df 91       	pop	r29
    1c1e:	08 95       	ret

00001c20 <Timer0_DeInit>:

void Timer0_DeInit(void)
{
    1c20:	df 93       	push	r29
    1c22:	cf 93       	push	r28
    1c24:	cd b7       	in	r28, 0x3d	; 61
    1c26:	de b7       	in	r29, 0x3e	; 62
	TCCR0=0;
    1c28:	e3 e5       	ldi	r30, 0x53	; 83
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	10 82       	st	Z, r1
	TIMSK=0;
    1c2e:	e9 e5       	ldi	r30, 0x59	; 89
    1c30:	f0 e0       	ldi	r31, 0x00	; 0
    1c32:	10 82       	st	Z, r1
//	g_callBackPtr=NULL_PTR;
}
    1c34:	cf 91       	pop	r28
    1c36:	df 91       	pop	r29
    1c38:	08 95       	ret

00001c3a <TWI_init>:
#include "common_macros.h"
#include <avr/io.h>


void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    1c3a:	df 93       	push	r29
    1c3c:	cf 93       	push	r28
    1c3e:	00 d0       	rcall	.+0      	; 0x1c40 <TWI_init+0x6>
    1c40:	cd b7       	in	r28, 0x3d	; 61
    1c42:	de b7       	in	r29, 0x3e	; 62
    1c44:	9a 83       	std	Y+2, r25	; 0x02
    1c46:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = Config_Ptr->BitRateRegister_TWBR;
    1c48:	a0 e2       	ldi	r26, 0x20	; 32
    1c4a:	b0 e0       	ldi	r27, 0x00	; 0
    1c4c:	e9 81       	ldd	r30, Y+1	; 0x01
    1c4e:	fa 81       	ldd	r31, Y+2	; 0x02
    1c50:	80 81       	ld	r24, Z
    1c52:	8c 93       	st	X, r24

	TWSR = ( TWSR & (0XFC) ) | (Config_Ptr->prescaler);
    1c54:	a1 e2       	ldi	r26, 0x21	; 33
    1c56:	b0 e0       	ldi	r27, 0x00	; 0
    1c58:	e1 e2       	ldi	r30, 0x21	; 33
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	80 81       	ld	r24, Z
    1c5e:	98 2f       	mov	r25, r24
    1c60:	9c 7f       	andi	r25, 0xFC	; 252
    1c62:	e9 81       	ldd	r30, Y+1	; 0x01
    1c64:	fa 81       	ldd	r31, Y+2	; 0x02
    1c66:	81 81       	ldd	r24, Z+1	; 0x01
    1c68:	89 2b       	or	r24, r25
    1c6a:	8c 93       	st	X, r24
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = Config_Ptr->My_Address << 1;; // my address = 0x01 :)
    1c6c:	a2 e2       	ldi	r26, 0x22	; 34
    1c6e:	b0 e0       	ldi	r27, 0x00	; 0
    1c70:	e9 81       	ldd	r30, Y+1	; 0x01
    1c72:	fa 81       	ldd	r31, Y+2	; 0x02
    1c74:	82 81       	ldd	r24, Z+2	; 0x02
    1c76:	88 0f       	add	r24, r24
    1c78:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    1c7a:	e6 e5       	ldi	r30, 0x56	; 86
    1c7c:	f0 e0       	ldi	r31, 0x00	; 0
    1c7e:	84 e0       	ldi	r24, 0x04	; 4
    1c80:	80 83       	st	Z, r24
}
    1c82:	0f 90       	pop	r0
    1c84:	0f 90       	pop	r0
    1c86:	cf 91       	pop	r28
    1c88:	df 91       	pop	r29
    1c8a:	08 95       	ret

00001c8c <TWI_start>:

void TWI_start(void)
{
    1c8c:	df 93       	push	r29
    1c8e:	cf 93       	push	r28
    1c90:	cd b7       	in	r28, 0x3d	; 61
    1c92:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1c94:	e6 e5       	ldi	r30, 0x56	; 86
    1c96:	f0 e0       	ldi	r31, 0x00	; 0
    1c98:	84 ea       	ldi	r24, 0xA4	; 164
    1c9a:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1c9c:	e6 e5       	ldi	r30, 0x56	; 86
    1c9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ca0:	80 81       	ld	r24, Z
    1ca2:	88 23       	and	r24, r24
    1ca4:	dc f7       	brge	.-10     	; 0x1c9c <TWI_start+0x10>
}
    1ca6:	cf 91       	pop	r28
    1ca8:	df 91       	pop	r29
    1caa:	08 95       	ret

00001cac <TWI_stop>:

void TWI_stop(void)
{
    1cac:	df 93       	push	r29
    1cae:	cf 93       	push	r28
    1cb0:	cd b7       	in	r28, 0x3d	; 61
    1cb2:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1cb4:	e6 e5       	ldi	r30, 0x56	; 86
    1cb6:	f0 e0       	ldi	r31, 0x00	; 0
    1cb8:	84 e9       	ldi	r24, 0x94	; 148
    1cba:	80 83       	st	Z, r24
}
    1cbc:	cf 91       	pop	r28
    1cbe:	df 91       	pop	r29
    1cc0:	08 95       	ret

00001cc2 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    1cc2:	df 93       	push	r29
    1cc4:	cf 93       	push	r28
    1cc6:	0f 92       	push	r0
    1cc8:	cd b7       	in	r28, 0x3d	; 61
    1cca:	de b7       	in	r29, 0x3e	; 62
    1ccc:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1cce:	e3 e2       	ldi	r30, 0x23	; 35
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	89 81       	ldd	r24, Y+1	; 0x01
    1cd4:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    1cd6:	e6 e5       	ldi	r30, 0x56	; 86
    1cd8:	f0 e0       	ldi	r31, 0x00	; 0
    1cda:	84 e8       	ldi	r24, 0x84	; 132
    1cdc:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1cde:	e6 e5       	ldi	r30, 0x56	; 86
    1ce0:	f0 e0       	ldi	r31, 0x00	; 0
    1ce2:	80 81       	ld	r24, Z
    1ce4:	88 23       	and	r24, r24
    1ce6:	dc f7       	brge	.-10     	; 0x1cde <TWI_writeByte+0x1c>
}
    1ce8:	0f 90       	pop	r0
    1cea:	cf 91       	pop	r28
    1cec:	df 91       	pop	r29
    1cee:	08 95       	ret

00001cf0 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    1cf0:	df 93       	push	r29
    1cf2:	cf 93       	push	r28
    1cf4:	cd b7       	in	r28, 0x3d	; 61
    1cf6:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1cf8:	e6 e5       	ldi	r30, 0x56	; 86
    1cfa:	f0 e0       	ldi	r31, 0x00	; 0
    1cfc:	84 ec       	ldi	r24, 0xC4	; 196
    1cfe:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1d00:	e6 e5       	ldi	r30, 0x56	; 86
    1d02:	f0 e0       	ldi	r31, 0x00	; 0
    1d04:	80 81       	ld	r24, Z
    1d06:	88 23       	and	r24, r24
    1d08:	dc f7       	brge	.-10     	; 0x1d00 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    1d0a:	e3 e2       	ldi	r30, 0x23	; 35
    1d0c:	f0 e0       	ldi	r31, 0x00	; 0
    1d0e:	80 81       	ld	r24, Z
}
    1d10:	cf 91       	pop	r28
    1d12:	df 91       	pop	r29
    1d14:	08 95       	ret

00001d16 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    1d16:	df 93       	push	r29
    1d18:	cf 93       	push	r28
    1d1a:	cd b7       	in	r28, 0x3d	; 61
    1d1c:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1d1e:	e6 e5       	ldi	r30, 0x56	; 86
    1d20:	f0 e0       	ldi	r31, 0x00	; 0
    1d22:	84 e8       	ldi	r24, 0x84	; 132
    1d24:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1d26:	e6 e5       	ldi	r30, 0x56	; 86
    1d28:	f0 e0       	ldi	r31, 0x00	; 0
    1d2a:	80 81       	ld	r24, Z
    1d2c:	88 23       	and	r24, r24
    1d2e:	dc f7       	brge	.-10     	; 0x1d26 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    1d30:	e3 e2       	ldi	r30, 0x23	; 35
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	80 81       	ld	r24, Z
}
    1d36:	cf 91       	pop	r28
    1d38:	df 91       	pop	r29
    1d3a:	08 95       	ret

00001d3c <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    1d3c:	df 93       	push	r29
    1d3e:	cf 93       	push	r28
    1d40:	0f 92       	push	r0
    1d42:	cd b7       	in	r28, 0x3d	; 61
    1d44:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    1d46:	e1 e2       	ldi	r30, 0x21	; 33
    1d48:	f0 e0       	ldi	r31, 0x00	; 0
    1d4a:	80 81       	ld	r24, Z
    1d4c:	88 7f       	andi	r24, 0xF8	; 248
    1d4e:	89 83       	std	Y+1, r24	; 0x01
    return status;
    1d50:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d52:	0f 90       	pop	r0
    1d54:	cf 91       	pop	r28
    1d56:	df 91       	pop	r29
    1d58:	08 95       	ret

00001d5a <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const Uart_ConfigType * Config_Ptr)
{
    1d5a:	df 93       	push	r29
    1d5c:	cf 93       	push	r28
    1d5e:	00 d0       	rcall	.+0      	; 0x1d60 <UART_init+0x6>
    1d60:	00 d0       	rcall	.+0      	; 0x1d62 <UART_init+0x8>
    1d62:	cd b7       	in	r28, 0x3d	; 61
    1d64:	de b7       	in	r29, 0x3e	; 62
    1d66:	9c 83       	std	Y+4, r25	; 0x04
    1d68:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    1d6a:	1a 82       	std	Y+2, r1	; 0x02
    1d6c:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    1d6e:	eb e2       	ldi	r30, 0x2B	; 43
    1d70:	f0 e0       	ldi	r31, 0x00	; 0
    1d72:	82 e0       	ldi	r24, 0x02	; 2
    1d74:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    1d76:	ea e2       	ldi	r30, 0x2A	; 42
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	88 e1       	ldi	r24, 0x18	; 24
    1d7c:	80 83       	st	Z, r24
	UCSRB = (UCSRB & 0xFB) | ((Config_Ptr->data & 0x04) << UCSZ2);
    1d7e:	aa e2       	ldi	r26, 0x2A	; 42
    1d80:	b0 e0       	ldi	r27, 0x00	; 0
    1d82:	ea e2       	ldi	r30, 0x2A	; 42
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	80 81       	ld	r24, Z
    1d88:	28 2f       	mov	r18, r24
    1d8a:	2b 7f       	andi	r18, 0xFB	; 251
    1d8c:	eb 81       	ldd	r30, Y+3	; 0x03
    1d8e:	fc 81       	ldd	r31, Y+4	; 0x04
    1d90:	84 81       	ldd	r24, Z+4	; 0x04
    1d92:	88 2f       	mov	r24, r24
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	84 70       	andi	r24, 0x04	; 4
    1d98:	90 70       	andi	r25, 0x00	; 0
    1d9a:	88 0f       	add	r24, r24
    1d9c:	99 1f       	adc	r25, r25
    1d9e:	88 0f       	add	r24, r24
    1da0:	99 1f       	adc	r25, r25
    1da2:	82 2b       	or	r24, r18
    1da4:	8c 93       	st	X, r24
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
//	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1);
	UCSRC |=(1<<URSEL);
    1da6:	a0 e4       	ldi	r26, 0x40	; 64
    1da8:	b0 e0       	ldi	r27, 0x00	; 0
    1daa:	e0 e4       	ldi	r30, 0x40	; 64
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	80 81       	ld	r24, Z
    1db0:	80 68       	ori	r24, 0x80	; 128
    1db2:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF9) | ((Config_Ptr->data & 0x03) << UCSZ0);
    1db4:	a0 e4       	ldi	r26, 0x40	; 64
    1db6:	b0 e0       	ldi	r27, 0x00	; 0
    1db8:	e0 e4       	ldi	r30, 0x40	; 64
    1dba:	f0 e0       	ldi	r31, 0x00	; 0
    1dbc:	80 81       	ld	r24, Z
    1dbe:	28 2f       	mov	r18, r24
    1dc0:	29 7f       	andi	r18, 0xF9	; 249
    1dc2:	eb 81       	ldd	r30, Y+3	; 0x03
    1dc4:	fc 81       	ldd	r31, Y+4	; 0x04
    1dc6:	84 81       	ldd	r24, Z+4	; 0x04
    1dc8:	88 2f       	mov	r24, r24
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	83 70       	andi	r24, 0x03	; 3
    1dce:	90 70       	andi	r25, 0x00	; 0
    1dd0:	88 0f       	add	r24, r24
    1dd2:	99 1f       	adc	r25, r25
    1dd4:	82 2b       	or	r24, r18
    1dd6:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xCF) | ((Config_Ptr->parity) << UPM0);
    1dd8:	a0 e4       	ldi	r26, 0x40	; 64
    1dda:	b0 e0       	ldi	r27, 0x00	; 0
    1ddc:	e0 e4       	ldi	r30, 0x40	; 64
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	80 81       	ld	r24, Z
    1de2:	28 2f       	mov	r18, r24
    1de4:	2f 7c       	andi	r18, 0xCF	; 207
    1de6:	eb 81       	ldd	r30, Y+3	; 0x03
    1de8:	fc 81       	ldd	r31, Y+4	; 0x04
    1dea:	85 81       	ldd	r24, Z+5	; 0x05
    1dec:	88 2f       	mov	r24, r24
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	82 95       	swap	r24
    1df2:	92 95       	swap	r25
    1df4:	90 7f       	andi	r25, 0xF0	; 240
    1df6:	98 27       	eor	r25, r24
    1df8:	80 7f       	andi	r24, 0xF0	; 240
    1dfa:	98 27       	eor	r25, r24
    1dfc:	82 2b       	or	r24, r18
    1dfe:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF7) | ((Config_Ptr->stopBit)<< USBS);
    1e00:	a0 e4       	ldi	r26, 0x40	; 64
    1e02:	b0 e0       	ldi	r27, 0x00	; 0
    1e04:	e0 e4       	ldi	r30, 0x40	; 64
    1e06:	f0 e0       	ldi	r31, 0x00	; 0
    1e08:	80 81       	ld	r24, Z
    1e0a:	28 2f       	mov	r18, r24
    1e0c:	27 7f       	andi	r18, 0xF7	; 247
    1e0e:	eb 81       	ldd	r30, Y+3	; 0x03
    1e10:	fc 81       	ldd	r31, Y+4	; 0x04
    1e12:	86 81       	ldd	r24, Z+6	; 0x06
    1e14:	88 2f       	mov	r24, r24
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	88 0f       	add	r24, r24
    1e1a:	99 1f       	adc	r25, r25
    1e1c:	88 0f       	add	r24, r24
    1e1e:	99 1f       	adc	r25, r25
    1e20:	88 0f       	add	r24, r24
    1e22:	99 1f       	adc	r25, r25
    1e24:	82 2b       	or	r24, r18
    1e26:	8c 93       	st	X, r24

	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baudrate) * 8UL))) - 1);
    1e28:	eb 81       	ldd	r30, Y+3	; 0x03
    1e2a:	fc 81       	ldd	r31, Y+4	; 0x04
    1e2c:	80 81       	ld	r24, Z
    1e2e:	91 81       	ldd	r25, Z+1	; 0x01
    1e30:	a2 81       	ldd	r26, Z+2	; 0x02
    1e32:	b3 81       	ldd	r27, Z+3	; 0x03
    1e34:	88 0f       	add	r24, r24
    1e36:	99 1f       	adc	r25, r25
    1e38:	aa 1f       	adc	r26, r26
    1e3a:	bb 1f       	adc	r27, r27
    1e3c:	88 0f       	add	r24, r24
    1e3e:	99 1f       	adc	r25, r25
    1e40:	aa 1f       	adc	r26, r26
    1e42:	bb 1f       	adc	r27, r27
    1e44:	88 0f       	add	r24, r24
    1e46:	99 1f       	adc	r25, r25
    1e48:	aa 1f       	adc	r26, r26
    1e4a:	bb 1f       	adc	r27, r27
    1e4c:	9c 01       	movw	r18, r24
    1e4e:	ad 01       	movw	r20, r26
    1e50:	80 e4       	ldi	r24, 0x40	; 64
    1e52:	92 e4       	ldi	r25, 0x42	; 66
    1e54:	af e0       	ldi	r26, 0x0F	; 15
    1e56:	b0 e0       	ldi	r27, 0x00	; 0
    1e58:	bc 01       	movw	r22, r24
    1e5a:	cd 01       	movw	r24, r26
    1e5c:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__udivmodsi4>
    1e60:	da 01       	movw	r26, r20
    1e62:	c9 01       	movw	r24, r18
    1e64:	01 97       	sbiw	r24, 0x01	; 1
    1e66:	9a 83       	std	Y+2, r25	; 0x02
    1e68:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    1e6a:	e0 e4       	ldi	r30, 0x40	; 64
    1e6c:	f0 e0       	ldi	r31, 0x00	; 0
    1e6e:	89 81       	ldd	r24, Y+1	; 0x01
    1e70:	9a 81       	ldd	r25, Y+2	; 0x02
    1e72:	89 2f       	mov	r24, r25
    1e74:	99 27       	eor	r25, r25
    1e76:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    1e78:	e9 e2       	ldi	r30, 0x29	; 41
    1e7a:	f0 e0       	ldi	r31, 0x00	; 0
    1e7c:	89 81       	ldd	r24, Y+1	; 0x01
    1e7e:	80 83       	st	Z, r24
}
    1e80:	0f 90       	pop	r0
    1e82:	0f 90       	pop	r0
    1e84:	0f 90       	pop	r0
    1e86:	0f 90       	pop	r0
    1e88:	cf 91       	pop	r28
    1e8a:	df 91       	pop	r29
    1e8c:	08 95       	ret

00001e8e <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    1e8e:	df 93       	push	r29
    1e90:	cf 93       	push	r28
    1e92:	0f 92       	push	r0
    1e94:	cd b7       	in	r28, 0x3d	; 61
    1e96:	de b7       	in	r29, 0x3e	; 62
    1e98:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    1e9a:	eb e2       	ldi	r30, 0x2B	; 43
    1e9c:	f0 e0       	ldi	r31, 0x00	; 0
    1e9e:	80 81       	ld	r24, Z
    1ea0:	88 2f       	mov	r24, r24
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	80 72       	andi	r24, 0x20	; 32
    1ea6:	90 70       	andi	r25, 0x00	; 0
    1ea8:	00 97       	sbiw	r24, 0x00	; 0
    1eaa:	b9 f3       	breq	.-18     	; 0x1e9a <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    1eac:	ec e2       	ldi	r30, 0x2C	; 44
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
    1eb0:	89 81       	ldd	r24, Y+1	; 0x01
    1eb2:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    1eb4:	0f 90       	pop	r0
    1eb6:	cf 91       	pop	r28
    1eb8:	df 91       	pop	r29
    1eba:	08 95       	ret

00001ebc <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    1ebc:	df 93       	push	r29
    1ebe:	cf 93       	push	r28
    1ec0:	cd b7       	in	r28, 0x3d	; 61
    1ec2:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    1ec4:	eb e2       	ldi	r30, 0x2B	; 43
    1ec6:	f0 e0       	ldi	r31, 0x00	; 0
    1ec8:	80 81       	ld	r24, Z
    1eca:	88 23       	and	r24, r24
    1ecc:	dc f7       	brge	.-10     	; 0x1ec4 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    1ece:	ec e2       	ldi	r30, 0x2C	; 44
    1ed0:	f0 e0       	ldi	r31, 0x00	; 0
    1ed2:	80 81       	ld	r24, Z
}
    1ed4:	cf 91       	pop	r28
    1ed6:	df 91       	pop	r29
    1ed8:	08 95       	ret

00001eda <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    1eda:	df 93       	push	r29
    1edc:	cf 93       	push	r28
    1ede:	00 d0       	rcall	.+0      	; 0x1ee0 <UART_sendString+0x6>
    1ee0:	0f 92       	push	r0
    1ee2:	cd b7       	in	r28, 0x3d	; 61
    1ee4:	de b7       	in	r29, 0x3e	; 62
    1ee6:	9b 83       	std	Y+3, r25	; 0x03
    1ee8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1eea:	19 82       	std	Y+1, r1	; 0x01
    1eec:	0e c0       	rjmp	.+28     	; 0x1f0a <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    1eee:	89 81       	ldd	r24, Y+1	; 0x01
    1ef0:	28 2f       	mov	r18, r24
    1ef2:	30 e0       	ldi	r19, 0x00	; 0
    1ef4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ef8:	fc 01       	movw	r30, r24
    1efa:	e2 0f       	add	r30, r18
    1efc:	f3 1f       	adc	r31, r19
    1efe:	80 81       	ld	r24, Z
    1f00:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <UART_sendByte>
		i++;
    1f04:	89 81       	ldd	r24, Y+1	; 0x01
    1f06:	8f 5f       	subi	r24, 0xFF	; 255
    1f08:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    1f0a:	89 81       	ldd	r24, Y+1	; 0x01
    1f0c:	28 2f       	mov	r18, r24
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	8a 81       	ldd	r24, Y+2	; 0x02
    1f12:	9b 81       	ldd	r25, Y+3	; 0x03
    1f14:	fc 01       	movw	r30, r24
    1f16:	e2 0f       	add	r30, r18
    1f18:	f3 1f       	adc	r31, r19
    1f1a:	80 81       	ld	r24, Z
    1f1c:	88 23       	and	r24, r24
    1f1e:	39 f7       	brne	.-50     	; 0x1eee <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    1f20:	0f 90       	pop	r0
    1f22:	0f 90       	pop	r0
    1f24:	0f 90       	pop	r0
    1f26:	cf 91       	pop	r28
    1f28:	df 91       	pop	r29
    1f2a:	08 95       	ret

00001f2c <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    1f2c:	0f 93       	push	r16
    1f2e:	1f 93       	push	r17
    1f30:	df 93       	push	r29
    1f32:	cf 93       	push	r28
    1f34:	00 d0       	rcall	.+0      	; 0x1f36 <UART_receiveString+0xa>
    1f36:	0f 92       	push	r0
    1f38:	cd b7       	in	r28, 0x3d	; 61
    1f3a:	de b7       	in	r29, 0x3e	; 62
    1f3c:	9b 83       	std	Y+3, r25	; 0x03
    1f3e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1f40:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    1f42:	89 81       	ldd	r24, Y+1	; 0x01
    1f44:	28 2f       	mov	r18, r24
    1f46:	30 e0       	ldi	r19, 0x00	; 0
    1f48:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f4c:	8c 01       	movw	r16, r24
    1f4e:	02 0f       	add	r16, r18
    1f50:	13 1f       	adc	r17, r19
    1f52:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <UART_recieveByte>
    1f56:	f8 01       	movw	r30, r16
    1f58:	80 83       	st	Z, r24
    1f5a:	0f c0       	rjmp	.+30     	; 0x1f7a <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    1f5c:	89 81       	ldd	r24, Y+1	; 0x01
    1f5e:	8f 5f       	subi	r24, 0xFF	; 255
    1f60:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    1f62:	89 81       	ldd	r24, Y+1	; 0x01
    1f64:	28 2f       	mov	r18, r24
    1f66:	30 e0       	ldi	r19, 0x00	; 0
    1f68:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f6c:	8c 01       	movw	r16, r24
    1f6e:	02 0f       	add	r16, r18
    1f70:	13 1f       	adc	r17, r19
    1f72:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <UART_recieveByte>
    1f76:	f8 01       	movw	r30, r16
    1f78:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    1f7a:	89 81       	ldd	r24, Y+1	; 0x01
    1f7c:	28 2f       	mov	r18, r24
    1f7e:	30 e0       	ldi	r19, 0x00	; 0
    1f80:	8a 81       	ldd	r24, Y+2	; 0x02
    1f82:	9b 81       	ldd	r25, Y+3	; 0x03
    1f84:	fc 01       	movw	r30, r24
    1f86:	e2 0f       	add	r30, r18
    1f88:	f3 1f       	adc	r31, r19
    1f8a:	80 81       	ld	r24, Z
    1f8c:	83 32       	cpi	r24, 0x23	; 35
    1f8e:	31 f7       	brne	.-52     	; 0x1f5c <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    1f90:	89 81       	ldd	r24, Y+1	; 0x01
    1f92:	28 2f       	mov	r18, r24
    1f94:	30 e0       	ldi	r19, 0x00	; 0
    1f96:	8a 81       	ldd	r24, Y+2	; 0x02
    1f98:	9b 81       	ldd	r25, Y+3	; 0x03
    1f9a:	fc 01       	movw	r30, r24
    1f9c:	e2 0f       	add	r30, r18
    1f9e:	f3 1f       	adc	r31, r19
    1fa0:	10 82       	st	Z, r1
}
    1fa2:	0f 90       	pop	r0
    1fa4:	0f 90       	pop	r0
    1fa6:	0f 90       	pop	r0
    1fa8:	cf 91       	pop	r28
    1faa:	df 91       	pop	r29
    1fac:	1f 91       	pop	r17
    1fae:	0f 91       	pop	r16
    1fb0:	08 95       	ret

00001fb2 <__udivmodsi4>:
    1fb2:	a1 e2       	ldi	r26, 0x21	; 33
    1fb4:	1a 2e       	mov	r1, r26
    1fb6:	aa 1b       	sub	r26, r26
    1fb8:	bb 1b       	sub	r27, r27
    1fba:	fd 01       	movw	r30, r26
    1fbc:	0d c0       	rjmp	.+26     	; 0x1fd8 <__udivmodsi4_ep>

00001fbe <__udivmodsi4_loop>:
    1fbe:	aa 1f       	adc	r26, r26
    1fc0:	bb 1f       	adc	r27, r27
    1fc2:	ee 1f       	adc	r30, r30
    1fc4:	ff 1f       	adc	r31, r31
    1fc6:	a2 17       	cp	r26, r18
    1fc8:	b3 07       	cpc	r27, r19
    1fca:	e4 07       	cpc	r30, r20
    1fcc:	f5 07       	cpc	r31, r21
    1fce:	20 f0       	brcs	.+8      	; 0x1fd8 <__udivmodsi4_ep>
    1fd0:	a2 1b       	sub	r26, r18
    1fd2:	b3 0b       	sbc	r27, r19
    1fd4:	e4 0b       	sbc	r30, r20
    1fd6:	f5 0b       	sbc	r31, r21

00001fd8 <__udivmodsi4_ep>:
    1fd8:	66 1f       	adc	r22, r22
    1fda:	77 1f       	adc	r23, r23
    1fdc:	88 1f       	adc	r24, r24
    1fde:	99 1f       	adc	r25, r25
    1fe0:	1a 94       	dec	r1
    1fe2:	69 f7       	brne	.-38     	; 0x1fbe <__udivmodsi4_loop>
    1fe4:	60 95       	com	r22
    1fe6:	70 95       	com	r23
    1fe8:	80 95       	com	r24
    1fea:	90 95       	com	r25
    1fec:	9b 01       	movw	r18, r22
    1fee:	ac 01       	movw	r20, r24
    1ff0:	bd 01       	movw	r22, r26
    1ff2:	cf 01       	movw	r24, r30
    1ff4:	08 95       	ret

00001ff6 <__prologue_saves__>:
    1ff6:	2f 92       	push	r2
    1ff8:	3f 92       	push	r3
    1ffa:	4f 92       	push	r4
    1ffc:	5f 92       	push	r5
    1ffe:	6f 92       	push	r6
    2000:	7f 92       	push	r7
    2002:	8f 92       	push	r8
    2004:	9f 92       	push	r9
    2006:	af 92       	push	r10
    2008:	bf 92       	push	r11
    200a:	cf 92       	push	r12
    200c:	df 92       	push	r13
    200e:	ef 92       	push	r14
    2010:	ff 92       	push	r15
    2012:	0f 93       	push	r16
    2014:	1f 93       	push	r17
    2016:	cf 93       	push	r28
    2018:	df 93       	push	r29
    201a:	cd b7       	in	r28, 0x3d	; 61
    201c:	de b7       	in	r29, 0x3e	; 62
    201e:	ca 1b       	sub	r28, r26
    2020:	db 0b       	sbc	r29, r27
    2022:	0f b6       	in	r0, 0x3f	; 63
    2024:	f8 94       	cli
    2026:	de bf       	out	0x3e, r29	; 62
    2028:	0f be       	out	0x3f, r0	; 63
    202a:	cd bf       	out	0x3d, r28	; 61
    202c:	09 94       	ijmp

0000202e <__epilogue_restores__>:
    202e:	2a 88       	ldd	r2, Y+18	; 0x12
    2030:	39 88       	ldd	r3, Y+17	; 0x11
    2032:	48 88       	ldd	r4, Y+16	; 0x10
    2034:	5f 84       	ldd	r5, Y+15	; 0x0f
    2036:	6e 84       	ldd	r6, Y+14	; 0x0e
    2038:	7d 84       	ldd	r7, Y+13	; 0x0d
    203a:	8c 84       	ldd	r8, Y+12	; 0x0c
    203c:	9b 84       	ldd	r9, Y+11	; 0x0b
    203e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2040:	b9 84       	ldd	r11, Y+9	; 0x09
    2042:	c8 84       	ldd	r12, Y+8	; 0x08
    2044:	df 80       	ldd	r13, Y+7	; 0x07
    2046:	ee 80       	ldd	r14, Y+6	; 0x06
    2048:	fd 80       	ldd	r15, Y+5	; 0x05
    204a:	0c 81       	ldd	r16, Y+4	; 0x04
    204c:	1b 81       	ldd	r17, Y+3	; 0x03
    204e:	aa 81       	ldd	r26, Y+2	; 0x02
    2050:	b9 81       	ldd	r27, Y+1	; 0x01
    2052:	ce 0f       	add	r28, r30
    2054:	d1 1d       	adc	r29, r1
    2056:	0f b6       	in	r0, 0x3f	; 63
    2058:	f8 94       	cli
    205a:	de bf       	out	0x3e, r29	; 62
    205c:	0f be       	out	0x3f, r0	; 63
    205e:	cd bf       	out	0x3d, r28	; 61
    2060:	ed 01       	movw	r28, r26
    2062:	08 95       	ret

00002064 <_exit>:
    2064:	f8 94       	cli

00002066 <__stop_program>:
    2066:	ff cf       	rjmp	.-2      	; 0x2066 <__stop_program>
